#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
–í–∫–ª—é—á–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π, –∑–∞—â–∏—Ç—É –æ—Ç –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞ –∏ –¥—Ä—É–≥–∏–µ –º–µ—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
"""

import os
import bcrypt
import jwt
import time
import logging
from datetime import datetime, timedelta
from typing import Dict, Optional, Tuple
from collections import defaultdict
import threading

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
try:
    from dotenv import load_dotenv

    # –ó–∞–≥—Ä—É–∂–∞–µ–º deploy.env –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
    import os

    project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    deploy_env_path = os.path.join(project_root, "deployment", "deploy.env")

    if os.path.exists(deploy_env_path):
        load_dotenv(deploy_env_path)
        logger.info(f"‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {deploy_env_path}")
    else:
        load_dotenv()  # Fallback –∫ .env –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        logger.info("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ .env")
except ImportError:
    logger.warning("‚ö†Ô∏è python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")


class BruteForceProtection:
    """–ó–∞—â–∏—Ç–∞ –æ—Ç –±—Ä—É—Ç—Ñ–æ—Ä—Å –∞—Ç–∞–∫"""

    def __init__(self):
        self.login_attempts = defaultdict(list)
        self.lock = threading.Lock()
        self.max_attempts = int(os.getenv("MAX_LOGIN_ATTEMPTS", 5))
        self.timeout_minutes = int(os.getenv("LOGIN_TIMEOUT_MINUTES", 15))

    def is_blocked(self, username: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
        with self.lock:
            attempts = self.login_attempts.get(username, [])
            if not attempts:
                return False

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–ø—ã—Ç–∫–∏
            current_time = time.time()
            attempts = [attempt for attempt in attempts if current_time - attempt < self.timeout_minutes * 60]
            self.login_attempts[username] = attempts

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            if len(attempts) >= self.max_attempts:
                logger.warning(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞")
                return True

            return False

    def record_attempt(self, username: str, success: bool):
        """–ó–∞–ø–∏—Å–∞—Ç—å –ø–æ–ø—ã—Ç–∫—É –≤—Ö–æ–¥–∞"""
        with self.lock:
            current_time = time.time()

            if success:
                # –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –≤—Ö–æ–¥–µ –æ—á–∏—â–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏
                self.login_attempts[username] = []
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}, –ø–æ–ø—ã—Ç–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã")
            else:
                # –ü—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–º –≤—Ö–æ–¥–µ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—ã—Ç–∫—É
                self.login_attempts[username].append(current_time)
                attempts_count = len(self.login_attempts[username])
                logger.warning(
                    f"‚ùå –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è {username} (–ø–æ–ø—ã—Ç–∫–∞ {attempts_count}/{self.max_attempts})"
                )

                if attempts_count >= self.max_attempts:
                    logger.error(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ {self.timeout_minutes} –º–∏–Ω—É—Ç")


class PasswordSecurity:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –ø–∞—Ä–æ–ª—è–º–∏"""

    @staticmethod
    def hash_password(password: str) -> str:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º bcrypt"""
        try:
            rounds = int(os.getenv("BCRYPT_ROUNDS", 12))
            salt = bcrypt.gensalt(rounds=rounds)
            hashed = bcrypt.hashpw(password.encode("utf-8"), salt)
            return hashed.decode("utf-8")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è: {e}")
            raise

    @staticmethod
    def verify_password(password: str, hashed_password: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è"""
        try:
            return bcrypt.checkpw(password.encode("utf-8"), hashed_password.encode("utf-8"))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è: {e}")
            return False

    @staticmethod
    def validate_password_strength(password: str) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è"""
        if len(password) < 8:
            return False, "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤"

        if not any(c.isupper() for c in password):
            return False, "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É"

        if not any(c.islower() for c in password):
            return False, "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Ç—Ä–æ—á–Ω—É—é –±—É–∫–≤—É"

        if not any(c.isdigit() for c in password):
            return False, "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É"

        if not any(c in "!@#$%^&*()_+-=[]{}|;:,.<>?" for c in password):
            return False, "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª"

        return True, "–ü–∞—Ä–æ–ª—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"


class JWTManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞–º–∏"""

    def __init__(self):
        self.secret_key = os.getenv("JWT_SECRET_KEY")
        if not self.secret_key or len(self.secret_key) < 32:
            logger.error("‚ùå JWT_SECRET_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–∏–Ω–∏–º—É–º 32 —Å–∏–º–≤–æ–ª–∞)")
            raise ValueError("JWT_SECRET_KEY –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 32 —Å–∏–º–≤–æ–ª–∞")

        self.algorithm = "HS256"
        self.session_timeout = int(os.getenv("SESSION_TIMEOUT_MINUTES", 30))

    def create_token(self, username: str, role: str) -> str:
        """–°–æ–∑–¥–∞—Ç—å JWT —Ç–æ–∫–µ–Ω"""
        try:
            payload = {
                "username": username,
                "role": role,
                "exp": datetime.utcnow() + timedelta(minutes=self.session_timeout),
                "iat": datetime.utcnow(),
            }
            token = jwt.encode(payload, self.secret_key, algorithm=self.algorithm)
            logger.info(f"‚úÖ JWT —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
            return token
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è JWT —Ç–æ–∫–µ–Ω–∞: {e}")
            raise

    def verify_token(self, token: str) -> Optional[Dict]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å JWT —Ç–æ–∫–µ–Ω"""
        try:
            payload = jwt.decode(token, self.secret_key, algorithms=[self.algorithm])
            logger.info(f"‚úÖ JWT —Ç–æ–∫–µ–Ω –ø—Ä–æ–≤–µ—Ä–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {payload.get('username')}")
            return payload
        except jwt.ExpiredSignatureError:
            logger.warning("‚ùå JWT —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫")
            return None
        except jwt.InvalidTokenError as e:
            logger.warning(f"‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π JWT —Ç–æ–∫–µ–Ω: {e}")
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT —Ç–æ–∫–µ–Ω–∞: {e}")
            return None

    def refresh_token(self, token: str) -> Optional[str]:
        """–û–±–Ω–æ–≤–∏—Ç—å JWT —Ç–æ–∫–µ–Ω"""
        payload = self.verify_token(token)
        if payload:
            return self.create_token(payload["username"], payload["role"])
        return None


class SecurityManager:
    """–ì–ª–∞–≤–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""

    def __init__(self):
        self.brute_force_protection = BruteForceProtection()
        self.password_security = PasswordSecurity()
        self.jwt_manager = JWTManager()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self._validate_environment()

    def _validate_environment(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ deploy.env
        required_vars = ["APP_DB_PASSWORD", "JWT_SECRET_KEY"]  # –ò–∑ deploy.env  # –ò–∑ deploy.env

        missing_vars = []
        for var in required_vars:
            if not os.getenv(var):
                missing_vars.append(var)

        if missing_vars:
            logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
            logger.error("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª deployment/deploy.env")
            raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {missing_vars}")

        logger.info("‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

    def authenticate_user(self, username: str, password: str) -> Tuple[bool, Optional[str], Optional[str]]:
        """
        –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            Tuple[bool, Optional[str], Optional[str]]: (—É—Å–ø–µ—Ö, —Ç–æ–∫–µ–Ω, —Ä–æ–ª—å)
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        if self.brute_force_protection.is_blocked(username):
            return False, None, None

        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ –ë–î
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        success = False
        role = None

        if success:
            token = self.jwt_manager.create_token(username, role)
            self.brute_force_protection.record_attempt(username, True)
            return True, token, role
        else:
            self.brute_force_protection.record_attempt(username, False)
            return False, None, None

    def validate_session(self, token: str) -> Optional[Dict]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.jwt_manager.verify_token(token)

    def hash_password(self, password: str) -> str:
        """–•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è"""
        return self.password_security.hash_password(password)

    def verify_password(self, password: str, hashed_password: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è"""
        return self.password_security.verify_password(password, hashed_password)

    def validate_password_strength(self, password: str) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è"""
        return self.password_security.validate_password_strength(password)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–ª–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è)
_security_manager_instance = None


def get_security_manager():
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    global _security_manager_instance
    if _security_manager_instance is None:
        _security_manager_instance = SecurityManager()
    return _security_manager_instance


# –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
security_manager = property(get_security_manager)
