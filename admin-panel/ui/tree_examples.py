"""
–ü—Ä–∏–º–µ—Ä—ã —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞ –≤ Streamlit
"""

import streamlit as st
import json

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ streamlit-tree-select
try:
    from streamlit_tree_select import tree_select

    TREE_SELECT_AVAILABLE = True
except ImportError:
    TREE_SELECT_AVAILABLE = False


def show_tree_examples():
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞"""
    st.header("üå≥ –ü—Ä–∏–º–µ—Ä—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞ –≤ Streamlit")

    # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–µ—Ä–µ–≤–∞
    sample_tree = {
        "name": "–ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞",
        "children": [
            {
                "name": "–î–æ–∫—É–º–µ–Ω—Ç—ã",
                "children": [
                    {"name": "–û—Ç—á–µ—Ç.pdf", "type": "file"},
                    {"name": "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è.pptx", "type": "file"},
                    {
                        "name": "–ü—Ä–æ–µ–∫—Ç—ã",
                        "children": [{"name": "–ü—Ä–æ–µ–∫—Ç –ê", "type": "folder"}, {"name": "–ü—Ä–æ–µ–∫—Ç –ë", "type": "folder"}],
                    },
                ],
            },
            {
                "name": "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                "children": [{"name": "–§–æ—Ç–æ 1.jpg", "type": "file"}, {"name": "–§–æ—Ç–æ 2.png", "type": "file"}],
            },
        ],
    }

    # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    tabs = st.tabs(["1Ô∏è‚É£ Expander", "2Ô∏è‚É£ Markdown", "3Ô∏è‚É£ JSON", "4Ô∏è‚É£ Tree Select", "5Ô∏è‚É£ –ú–µ—Ç—Ä–∏–∫–∏"])

    with tabs[0]:
        st.subheader("üìÅ Expander (—Ä–∞—Å–∫—Ä—ã–≤–∞—é—â–∏–µ—Å—è –±–ª–æ–∫–∏)")
        display_tree_expander(sample_tree)

    with tabs[1]:
        st.subheader("üìù Markdown (—Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫)")
        display_tree_markdown(sample_tree)

    with tabs[2]:
        st.subheader("üîç JSON Viewer")
        st.json(sample_tree)

    with tabs[3]:
        st.subheader("üéØ Tree Select (–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –¥–µ—Ä–µ–≤–æ)")
        if TREE_SELECT_AVAILABLE:
            display_tree_select(sample_tree)
        else:
            st.warning("‚ö†Ô∏è streamlit-tree-select –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            st.code("pip install streamlit-tree-select")

    with tabs[4]:
        st.subheader("üìä –ú–µ—Ç—Ä–∏–∫–∏ –¥–µ—Ä–µ–≤–∞")
        display_tree_metrics(sample_tree)


def display_tree_expander(data, level=0):
    """–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –¥–µ—Ä–µ–≤–æ —Å –ø–æ–º–æ—â—å—é expander'–æ–≤"""
    if isinstance(data, dict):
        name = data.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        icon = "üìÅ" if data.get("children") else "üìÑ"

        with st.expander(f"{'  ' * level}{icon} {name}", expanded=level < 2):
            if "type" in data:
                st.write(f"üìã –¢–∏–ø: {data['type']}")

            if "children" in data and data["children"]:
                st.write("üìÇ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ:")
                for child in data["children"]:
                    display_tree_expander(child, level + 1)
            else:
                st.info("üì≠ –ü—É—Å—Ç–∞—è –ø–∞–ø–∫–∞")


def display_tree_markdown(data, level=0):
    """–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –¥–µ—Ä–µ–≤–æ –≤ –≤–∏–¥–µ markdown"""
    if isinstance(data, dict):
        name = data.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        icon = "üìÅ" if data.get("children") else "üìÑ"
        indent = "  " * level

        st.markdown(f"{indent}{icon} **{name}**")

        if "type" in data:
            st.markdown(f"{indent}  üìã –¢–∏–ø: {data['type']}")

        if "children" in data and data["children"]:
            for child in data["children"]:
                display_tree_markdown(child, level + 1)


def display_tree_select(data):
    """–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –¥–µ—Ä–µ–≤–æ"""
    if not TREE_SELECT_AVAILABLE:
        return

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è tree_select
    tree_data = convert_to_tree_select_format(data)

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –¥–µ—Ä–µ–≤–æ
    selected = tree_select(tree_data, show_expand_all=True, show_select_all=True, check_on_click=True)

    if selected:
        st.write("‚úÖ –í—ã–±—Ä–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:", selected)


def convert_to_tree_select_format(data):
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è tree_select"""
    if isinstance(data, dict):
        node = {
            "label": data.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"),
            "value": data.get("name", ""),
            "icon": "üìÅ" if data.get("children") else "üìÑ",
        }

        if data.get("children"):
            node["children"] = [convert_to_tree_select_format(child) for child in data["children"]]

        return node
    return data


def display_tree_metrics(data):
    """–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –¥–µ—Ä–µ–≤–∞"""
    stats = analyze_tree_stats(data)

    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.metric("üìÅ –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤", stats["total_items"])

    with col2:
        st.metric("üìÇ –ü–∞–ø–æ–∫", stats["folders"])

    with col3:
        st.metric("üìÑ –§–∞–π–ª–æ–≤", stats["files"])

    with col4:
        st.metric("üìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞", stats["max_depth"])


def analyze_tree_stats(data, level=0, stats=None):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–µ—Ä–µ–≤–æ –∏ —Å–æ–±–∏—Ä–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    if stats is None:
        stats = {"total_items": 0, "folders": 0, "files": 0, "max_depth": 0}

    if isinstance(data, dict):
        stats["total_items"] += 1
        stats["max_depth"] = max(stats["max_depth"], level)

        if data.get("children"):
            stats["folders"] += 1
            for child in data["children"]:
                analyze_tree_stats(child, level + 1, stats)
        else:
            stats["files"] += 1

    return stats


if __name__ == "__main__":
    show_tree_examples()
