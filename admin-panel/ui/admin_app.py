import streamlit as st
import asyncio
import json
import os
import sys
from datetime import datetime
from typing import Dict, Any, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ admin-panel –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
current_dir = os.path.dirname(os.path.abspath(__file__))
admin_panel_root = os.path.dirname(current_dir)  # –ü–æ–¥–Ω–∏–º–∞–µ–º—Å—è –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ (–∏–∑ ui/ –≤ admin-panel/)
sys.path.append(admin_panel_root)

try:
    from security.auth import get_auth, auth
    from database.database import get_db, db
except ImportError as e:
    st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
    st.error(f"üìÅ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    st.error(f"üìÅ –ü—É—Ç—å –∫ admin-panel: {admin_panel_root}")
    st.error(f"üìÅ Python path: {sys.path}")
    st.stop()


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Admin Panel - Alex Orator Bot", page_icon="üë®üèª‚Äçüíº", layout="wide", initial_sidebar_state="expanded"
)

# CSS —Å—Ç–∏–ª–∏ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Ö–æ–¥–∞
st.markdown(
    """
<style>


.login-container h2 {
    color: white !important;
    font-size: 2.5rem;
    font-weight: 700;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
    margin-bottom: 2rem;
}

.login-container .stTextInput > div > div > input {
    background: rgba(255, 255, 255, 0.9);
    border: none;
    border-radius: 10px;
    padding: 12px 16px;
    font-size: 16px;
    color: #333;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
}

.login-container .stTextInput > div > div > input:focus {
    background: white;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
    transform: translateY(-2px);
    transition: all 0.3s ease;
}

.login-container .stButton > button {
    background: linear-gradient(45deg, #ff6b6b, #ee5a24);
    border: none;
    border-radius: 10px;
    padding: 12px 24px;
    font-size: 18px;
    font-weight: 600;
    color: white;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
    transition: all 0.3s ease;
}

.login-container .stButton > button:hover {
    transform: translateY(-3px);
    box-shadow: 0 6px 25px rgba(0, 0, 0, 0.3);
}

.main-header {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 80%);
    padding: 2rem;
    border-radius: 15px;
    margin-bottom: 2rem;
    text-align: center;
    color: white;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
}

.main-header h1 {
    color: white !important;
    font-size: 3rem;
    font-weight: 700;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
    margin-bottom: 1rem;
}

.main-header p {
    color: rgba(255, 255, 255, 0.9);
    font-size: 1.2rem;
    margin: 0;
}
</style>
""",
    unsafe_allow_html=True,
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
if "authenticated" not in st.session_state:
    st.session_state.authenticated = False
if "admin_info" not in st.session_state:
    st.session_state.admin_info = None
if "token" not in st.session_state:
    st.session_state.token = None
if "user_role" not in st.session_state:
    st.session_state.user_role = "user"


def login_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞"""
    col1, col2, col3 = st.columns(3)
    with col2:
        st.markdown('<div class="login-container">', unsafe_allow_html=True)

        st.markdown(
            '<h2 style="text-align: center; color: white; margin-bottom: 2rem;">–í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</h2>',
            unsafe_allow_html=True,
        )

        with st.form("login_form"):
            username = st.text_input("üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", key="login_username_input")
            password = st.text_input("üîí –ü–∞—Ä–æ–ª—å", type="password", key="login_password_input")

            if st.form_submit_button("üöÄ –í–æ–π—Ç–∏", use_container_width=True):
                if username and password:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
                    from security.auth import authenticate_user, get_user_info

                    if authenticate_user(username, password):
                        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                        user_info = get_user_info(username)
                        if user_info:
                            # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
                            token = auth.create_access_token(data={"sub": user_info["username"]})

                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏–∏
                            st.session_state.authenticated = True
                            st.session_state.admin_info = user_info
                            st.session_state.token = token

                            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ session_state –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
                            st.session_state.user_role = user_info.get("role", "user")

                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            if user_info.get("user_type") == "admin":
                                st.success("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
                            elif user_info.get("user_type") == "user":
                                st.success("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
                            else:
                                st.success("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")

                            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
                            st.rerun()
                        else:
                            st.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
                    else:
                        st.error("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
                else:
                    st.error("‚ùå –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å")

        st.markdown("</div>", unsafe_allow_html=True)


def main_admin_page():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–¥–º–∏–Ω–∫–∏"""

    if not st.session_state.authenticated:
        login_page()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤) - –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    # if st.session_state.token and st.session_state.admin_info.get('user_type') == 'admin':
    #     try:
    #         admin_info = auth.get_current_admin(st.session_state.token)
    #         if not admin_info:
    #             st.error("‚ùå –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫. –í–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.")
    #             st.session_state.authenticated = False
    #             st.session_state.admin_info = None
    #             st.session_state.token = None
    #             st.rerun()
    #             return
    #     except Exception as e:
    #             st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
    #             st.session_state.authenticated = False
    #             st.session_state.admin_info = None
    #             st.session_state.token = None
    #             st.rerun()
    #             return

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    user_type = st.session_state.admin_info.get("user_type", "unknown")
    role_display = st.session_state.admin_info.get("role", "Unknown")

    # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∞—Å–∏–≤—É—é —Ä–æ–ª—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    from security.auth import get_user_role

    username = st.session_state.admin_info.get("username", "Unknown")
    display_role = get_user_role(username)

    if user_type == "admin":
        header_icon = "üë®üèª‚Äçüíº"
        header_title = "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å Alex Orator Bot"
    elif user_type == "user":
        header_icon = "üë§"
        header_title = "–ü–∞–Ω–µ–ª—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ Alex Orator Bot"
    else:
        header_icon = "üîß"
        header_title = "–°–∏—Å—Ç–µ–º–Ω–∞—è –ø–∞–Ω–µ–ª—å Alex Orator Bot"

    st.markdown(
        f"""
    <div class="main-header">
        <h1>{header_icon} {header_title}</h1>
        <p>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username} !</p>
    </div>
    """,
        unsafe_allow_html=True,
    )

    # –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
    if st.sidebar.button("üö™ –í—ã–π—Ç–∏", type="secondary"):
        st.session_state.authenticated = False
        st.session_state.admin_info = None
        st.session_state.token = None
        st.session_state.user_role = "user"
        st.rerun()

    # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_role = st.session_state.get("user_role", "user")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–ª–∏
    if user_role in ["super_admin", "admin"]:
        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≤–∏–¥—è—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        tab1, tab2, tab3 = st.tabs(["üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º", "üìù –¢–µ–º—ã –∏ –ó–∞–¥–∞–Ω–∏—è", "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"])

        with tab1:
            # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
            from content_page import content_management_page

            content_management_page()

        with tab2:
            # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–º–∞–º–∏ –∏ –∑–∞–¥–∞—á–∞–º–∏
            from topics_and_tasks_page import topics_and_tasks_management_page

            topics_and_tasks_management_page()

        with tab3:
            # –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
            from users_management import users_management_page

            users_management_page()

    elif user_role == "moderator":
        # –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
        (tab1,) = st.tabs(["üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º"])

        with tab1:
            # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
            from content_page import content_management_page

            content_management_page()

    else:
        # –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        (tab1,) = st.tabs(["üìù –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞"])

        with tab1:
            # –¢–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            from content_page import content_view_page

            content_view_page()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    if not st.session_state.authenticated:
        login_page()
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        if st.session_state.admin_info:
            main_admin_page()
        else:
            st.error("‚ùå –û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            st.session_state.authenticated = False
            st.session_state.user_role = "user"
            st.rerun()


if __name__ == "__main__":
    main()
