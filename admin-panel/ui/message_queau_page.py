from database.database import get_db
import streamlit as st
import pandas as pd
import json


def message_queue_management_page():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥—å—é —Å–æ–æ–±—â–µ–Ω–∏–π"""
    st.header("üì® –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥—å—é —Å–æ–æ–±—â–µ–Ω–∏–π")

    st.subheader("üìä –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–æ–æ–±—â–µ–Ω–∏–π
    show_message_queue_table()

    st.subheader("üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    add_message_form()


def show_message_queue_table():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏"""
    db = get_db()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if not db.conn:
        st.warning("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        try:
            db.connect()
            st.success("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        except Exception as e:
            st.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            st.info("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã –∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞")
            return

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    messages_data = db.get_message_queue()

    if not messages_data:
        st.warning("üì≠ –°–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    df = pd.DataFrame(messages_data)

    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    df = df.rename(
        columns={
            "id": "üÜî ID",
            "user_id": "üë§ User ID",
            "message": "üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ",
            "keyboard": "‚å®Ô∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞",
            "sent": "‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
            "created_at": "üìÖ –°–æ–∑–¥–∞–Ω–æ",
            "sent_at": "üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤",
        }
    )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    col1, col2, col3, col4 = st.columns(4)

    with col1:
        total_count = len(df)
        st.metric("üì® –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π", total_count)

    with col2:
        sent_count = len(df[df["‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"] == True])
        st.metric("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", sent_count)

    with col3:
        pending_count = len(df[df["‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"] == False])
        st.metric("‚è≥ –í –æ—á–µ—Ä–µ–¥–∏", pending_count)

    with col4:
        unique_users = len(df["üë§ User ID"].unique())
        st.metric("üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", unique_users)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    st.subheader("üìä –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π")

    # –§–∏–ª—å—Ç—Ä—ã
    col1, col2 = st.columns(2)

    with col1:
        # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É –æ—Ç–ø—Ä–∞–≤–∫–∏
        status_filter = st.selectbox("üì§ –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É:", ["–í—Å–µ", "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", "–í –æ—á–µ—Ä–µ–¥–∏"])

    with col2:
        # –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        unique_users_list = ["–í—Å–µ"] + df["üë§ User ID"].unique().tolist()
        user_filter = st.selectbox("üë§ –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:", unique_users_list)

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    filtered_df = df.copy()

    if status_filter == "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ":
        filtered_df = filtered_df[filtered_df["‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"] == True]
    elif status_filter == "–í –æ—á–µ—Ä–µ–¥–∏":
        filtered_df = filtered_df[filtered_df["‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"] == False]

    if user_filter != "–í—Å–µ":
        filtered_df = filtered_df[filtered_df["üë§ User ID"] == user_filter]

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
    if not filtered_df.empty:
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        display_df = filtered_df.copy()
        display_df["üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ"] = display_df["üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ"].apply(
            lambda x: x[:100] + "..." if len(str(x)) > 100 else x
        )

        st.dataframe(
            display_df,
            use_container_width=True,
            hide_index=True,
            column_config={
                "‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ": st.column_config.CheckboxColumn("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", help="–°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"),
                "üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ": st.column_config.TextColumn(
                    "üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ", help="–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–æ–±—Ä–µ–∑–∞–Ω–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)"
                ),
                "‚å®Ô∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞": st.column_config.TextColumn("‚å®Ô∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞", help="JSON —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"),
            },
        )

        # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
        col1, col2 = st.columns(2)

        with col1:
            csv = filtered_df.to_csv(index=False, encoding="utf-8-sig")
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å CSV",
                data=csv,
                file_name=f"message_queue_{status_filter.lower().replace(' ', '_')}.csv",
                mime="text/csv",
            )

        with col2:
            # –ü–æ–∫–∞–∑–∞—Ç—å JSON –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if st.button("üîç –ü–æ–∫–∞–∑–∞—Ç—å JSON", key="show_json_messages"):
                st.json(filtered_df.to_dict("records"))
    else:
        st.info("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏")


def add_message_form():
    """–§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    db = get_db()

    st.info(
        "üí° **–õ–æ–≥–∏–∫–∞:** –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –∏ –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏."
    )

    with st.form("add_message_form"):
        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        recipient_type = st.selectbox(
            "üë• –¢–∏–ø –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π:",
            ["single_user", "week_registration_users", "active_users"],
            format_func=lambda x: {
                "single_user": "üë§ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                "week_registration_users": "üìÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –Ω–µ–¥–µ–ª—é",
                "active_users": "‚úÖ –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
            }[x],
        )

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        selected_user = None
        if recipient_type == "single_user":
            users = get_users_for_selection(db)
            if users:
                user_options = [
                    f"{user['first_name']} {user['last_name']} (@{user['username']}) - {user['telegram_id']}"
                    for user in users
                ]
                selected_user_full = st.selectbox("üë§ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", user_options)
                if selected_user_full:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º telegram_id –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
                    selected_user = selected_user_full.split(" - ")[-1]
            else:
                st.warning("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å telegram_id")

        # –ü–æ–ª–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = st.text_area("üí¨ –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:", placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...", height=150)

        # –ü–æ–ª–µ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        keyboard_json = st.text_area(
            "‚å®Ô∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (JSON, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):",
            placeholder='{"inline_keyboard": [{"text": "–ö–Ω–æ–ø–∫–∞", "callback_data": "action"}]]}',
            height=100,
            help="JSON —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã Telegram. –û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ –Ω—É–∂–Ω–∞.",
        )

        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
        if message_text:
            st.subheader("üëÄ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:")
            st.info(f"**–ü–æ–ª—É—á–∞—Ç–µ–ª–∏:** {get_recipient_description(recipient_type, selected_user)}")
            st.write(f"**–°–æ–æ–±—â–µ–Ω–∏–µ:** {message_text}")
            if keyboard_json:
                try:
                    keyboard_data = json.loads(keyboard_json)
                    st.write(f"**–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞:** {json.dumps(keyboard_data, indent=2, ensure_ascii=False)}")
                except json.JSONDecodeError:
                    st.error("‚ùå –û—à–∏–±–∫–∞ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")

        if st.form_submit_button("üì® –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ(—è) –≤ –æ—á–µ—Ä–µ–¥—å"):
            if message_text:
                # –ü–∞—Ä—Å–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                keyboard_data = None
                if keyboard_json:
                    try:
                        keyboard_data = json.loads(keyboard_json)
                    except json.JSONDecodeError:
                        st.error("‚ùå –û—à–∏–±–∫–∞ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")
                        return

                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                user_ids = get_user_ids_for_sending(db, recipient_type, selected_user)

                if not user_ids:
                    st.warning("‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
                    return

                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å
                success_count = 0
                error_count = 0

                for user_id in user_ids:
                    success = db.add_message_to_queue(user_id, message_text, keyboard_data)
                    if success:
                        success_count += 1
                    else:
                        error_count += 1

                if success_count > 0:
                    st.success(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {success_count} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥—å!")
                    if error_count > 0:
                        st.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å {error_count} —Å–æ–æ–±—â–µ–Ω–∏–π")
                    st.rerun()
                else:
                    st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å")
            else:
                st.warning("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")


def get_users_for_selection(db):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤ —Ñ–æ—Ä–º–µ"""
    try:
        return db.get_users_by_telegram_id()
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return []


def get_recipient_description(recipient_type, selected_user=None):
    """–ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π"""
    descriptions = {
        "single_user": (
            f"–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {selected_user}" if selected_user else "–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–Ω–µ –≤—ã–±—Ä–∞–Ω)"
        ),
        "week_registration_users": "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é",
        "active_users": "–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å telegram_id",
    }
    return descriptions.get(recipient_type, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø")


def get_user_ids_for_sending(db, recipient_type, selected_user=None):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ user_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_ids = []

    try:
        if recipient_type == "single_user" and selected_user:
            user_ids = [selected_user]
        elif recipient_type == "week_registration_users":
            users = db.get_week_registration_users()
            if users:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ users –Ω–µ None –∏ –Ω–µ –ø—É—Å—Ç–æ–π
                user_ids = [user["user_id"] for user in users]
            else:
                st.warning("‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞ –Ω–µ–¥–µ–ª—é")
        elif recipient_type == "active_users":
            users = db.get_active_users()
            if users:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ users –Ω–µ None –∏ –Ω–µ –ø—É—Å—Ç–æ–π
                user_ids = [user["user_id"] for user in users]
            else:
                st.warning("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

        return user_ids
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return []
