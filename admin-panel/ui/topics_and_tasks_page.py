from database.database import get_db
import streamlit as st
import pandas as pd


def topics_and_tasks_management_page():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–º–∞–º–∏ –∏ –∑–∞–¥–∞—á–∞–º–∏"""
    st.header("üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–º–∞–º–∏ –∏ –∑–∞–¥–∞—á–∞–º–∏")

    st.subheader("üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–º–∞–º–∏")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ç–µ–º
    show_topics_table()

    st.subheader("üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–µ–º—ã/—É—Ä–æ–≤–Ω—è/–∑–∞–¥–∞—á–∏")

    add_topic_form()


def add_topic_form():
    """–§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ç–µ–º—ã/—É—Ä–æ–≤–Ω—è/–∑–∞–¥–∞—á–∏"""
    db = get_db()
    st.subheader("üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–µ–º—ã/—É—Ä–æ–≤–Ω—è/–∑–∞–¥–∞—á–∏")

    with st.form("add_topic_form"):
        st.info(
            "üí° **–õ–æ–≥–∏–∫–∞:** –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç. –ï—Å–ª–∏ –ø—É—Å—Ç–æ - —Å–æ–∑–¥–∞–µ—Ç—Å—è —Ç–µ–º–∞ (L1), –µ—Å–ª–∏ L1 - —Å–æ–∑–¥–∞–µ—Ç—Å—è —É—Ä–æ–≤–µ–Ω—å (L2), –µ—Å–ª–∏ L2 - —Å–æ–∑–¥–∞–µ—Ç—Å—è –∑–∞–¥–∞–Ω–∏–µ (L3)"
        )

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–¥–∏—Ç–µ–ª—è
        all_elements = get_all_elements_for_parent_selection(db)

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é "–ù–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è" –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—Ä–Ω–µ–≤–æ–π —Ç–µ–º—ã
        parent_options = ["–ù–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è (—Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç–µ–º—É)"] + all_elements

        parent_selection = st.selectbox("üè∑Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç:", parent_options)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è
        selected_level = determine_level_from_parent(parent_selection)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ
        if selected_level == 1:
            st.success("üéØ –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ç–µ–º–∞ (L1)")
        elif selected_level == 2:
            st.success("üéØ –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å (L2)")
        else:
            st.success("üéØ –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ (L3)")

        # –ü–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞
        element_name = st.text_input("üìù –ù–∞–∑–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞")
        description = st.text_area("üìÑ –û–ø–∏—Å–∞–Ω–∏–µ")
        is_active = st.checkbox("‚úÖ –ê–∫—Ç–∏–≤–Ω–∞", value=True)

        if st.form_submit_button("‚ûï –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç"):
            if element_name:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—è (–±–µ–∑ ID –∏ —ç–º–æ–¥–∑–∏)
                parent_name = None
                if parent_selection != "–ù–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è (—Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç–µ–º—É)":
                    # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏ –ø—Ä–µ—Ñ–∏–∫—Å, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ
                    if "üè∑Ô∏è " in parent_selection:
                        # –î–ª—è —Ç–µ–º L1: "üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ (ID: XX) - –¢–µ–º–∞ L1"
                        parent_name = parent_selection.replace("üè∑Ô∏è ", "").split(" (ID: ")[0]
                    elif "üìö " in parent_selection:
                        # –î–ª—è —É—Ä–æ–≤–Ω–µ–π L2: "üìö –ù–∞–∑–≤–∞–Ω–∏–µ (ID: XX) - –£—Ä–æ–≤–µ–Ω—å L2"
                        parent_name = parent_selection.replace("üìö ", "").split(" (ID: ")[0]
                    else:
                        # Fallback
                        parent_name = parent_selection.split(" (ID: ")[0] if parent_selection else None

                success = db.add_topic(parent_name, selected_level, element_name, description, is_active)
                if success:
                    st.success(f"‚úÖ –≠–ª–µ–º–µ–Ω—Ç —É—Ä–æ–≤–Ω—è {selected_level} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
                    st.rerun()
                else:
                    st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞")
            else:
                st.warning("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞")


def get_existing_topics(db, level: int):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ–º –∏–ª–∏ —É—Ä–æ–≤–Ω–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞"""
    try:
        topics_data = db.get_topics_tree()
        if not topics_data:
            return []

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —É—Ä–æ–≤–Ω—é
        if level == 1:
            # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–µ–º—ã (L1) —Å topic_id
            topics = {}
            for item in topics_data:
                if item.get("topic_name") and item.get("topic_id"):
                    topics[item["topic_name"]] = item["topic_id"]
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å topic_id –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            return [f"{name} (ID: {topic_id})" for name, topic_id in sorted(topics.items())]
        elif level == 2:
            # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ (L2) —Å topic_id
            levels = {}
            for item in topics_data:
                if item.get("level_name") and item.get("topic_id"):
                    levels[item["level_name"]] = item["topic_id"]
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å topic_id –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            return [f"{name} (ID: {topic_id})" for name, topic_id in sorted(levels.items())]
        else:
            return []
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–µ–º: {e}")
        return []


def get_all_elements_for_parent_selection(db):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–¥–∏—Ç–µ–ª—è"""
    try:
        topics_data = db.get_topics_tree()
        if not topics_data:
            return []

        elements = []

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º—ã (L1)
        topics = {}
        for item in topics_data:
            if item.get("topic_name") and item.get("topic_id"):
                topics[item["topic_name"]] = item["topic_id"]

        for name, topic_id in sorted(topics.items()):
            elements.append(f"üè∑Ô∏è {name} (ID: {topic_id}) - –¢–µ–º–∞ L1")

        # –î–æ–±–∞–≤–ª—è–µ–º —É—Ä–æ–≤–Ω–∏ (L2)
        levels = {}
        for item in topics_data:
            if item.get("level_name") and item.get("topic_id"):
                levels[item["level_name"]] = item["topic_id"]

        for name, topic_id in sorted(levels.items()):
            elements.append(f"üìö {name} (ID: {topic_id}) - –£—Ä–æ–≤–µ–Ω—å L2")

        return elements
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {e}")
        return []


def determine_level_from_parent(parent_selection):
    """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è"""
    if parent_selection == "–ù–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è (—Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç–µ–º—É)":
        return 1  # –°–æ–∑–¥–∞–µ–º —Ç–µ–º—É L1
    elif " - –¢–µ–º–∞ L1" in parent_selection:
        return 2  # –°–æ–∑–¥–∞–µ–º —É—Ä–æ–≤–µ–Ω—å L2
    elif " - –£—Ä–æ–≤–µ–Ω—å L2" in parent_selection:
        return 3  # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ L3
    else:
        return 1  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ–∑–¥–∞–µ–º —Ç–µ–º—É


def show_topics_table():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–º—ã –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ Topic (L1), Level (L2), Task (L3)"""

    db = get_db()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if not db.conn:
        st.warning("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        try:
            db.connect()
            st.success("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        except Exception as e:
            st.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            st.info("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã –∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞")
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ–º—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    topics_data = db.get_topics_tree()

    if not topics_data:
        st.warning("üìù –¢–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    df = pd.DataFrame(topics_data)

    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    df = df.rename(
        columns={
            "topic_id": "üÜî Topic ID",
            "topic_name": "üè∑Ô∏è Topic (L1)",
            "level_name": "üìö Level (L2)",
            "task_name": "üìù Task (L3)",
            "description": "üìÑ –û–ø–∏—Å–∞–Ω–∏–µ",
            "is_active": "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞",
        }
    )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    col1, col2, col3, col4 = st.columns(4)

    with col1:
        topics_count = len(df[df["üè∑Ô∏è Topic (L1)"].notna()].drop_duplicates("üè∑Ô∏è Topic (L1)"))
        st.metric("üè∑Ô∏è –í—Å–µ–≥–æ —Ç–µ–º", topics_count)

    with col2:
        levels_count = len(df[df["üìö Level (L2)"].notna()].drop_duplicates("üìö Level (L2)"))
        st.metric("üìö –í—Å–µ–≥–æ —É—Ä–æ–≤–Ω–µ–π", levels_count)

    with col3:
        tasks_count = len(df[df["üìù Task (L3)"].notna()].drop_duplicates("üìù Task (L3)"))
        st.metric("üìù –í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–∏–π", tasks_count)

    with col4:
        active_count = len(df[df["‚úÖ –ê–∫—Ç–∏–≤–Ω–∞"] == True])
        st.metric("‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö", active_count)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    st.subheader("üìä –¢–∞–±–ª–∏—Ü–∞ —Ç–µ–º –∏ –∑–∞–¥–∞–Ω–∏–π")

    # –§–∏–ª—å—Ç—Ä—ã
    col1, col2 = st.columns(2)

    with col1:
        # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–º–µ
        unique_topics = ["–í—Å–µ"] + df["üè∑Ô∏è Topic (L1)"].dropna().unique().tolist()
        selected_topic = st.selectbox("üè∑Ô∏è –§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–º–µ:", unique_topics)

    with col2:
        # –§–∏–ª—å—Ç—Ä –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        show_active_only = st.checkbox("‚úÖ –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ", value=True)

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    filtered_df = df.copy()

    if selected_topic != "–í—Å–µ":
        filtered_df = filtered_df[filtered_df["üè∑Ô∏è Topic (L1)"] == selected_topic]

    if show_active_only:
        filtered_df = filtered_df[filtered_df["‚úÖ –ê–∫—Ç–∏–≤–Ω–∞"] == True]

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
    if not filtered_df.empty:
        st.dataframe(
            filtered_df,
            use_container_width=True,
            hide_index=True,
            column_config={
                "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞": st.column_config.CheckboxColumn(
                    "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞", help="–°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–µ–º—ã/—É—Ä–æ–≤–Ω—è/–∑–∞–¥–∞–Ω–∏—è"
                )
            },
        )

        # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
        col1, col2 = st.columns(2)

        with col1:
            csv = filtered_df.to_csv(index=False, encoding="utf-8-sig")
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å CSV",
                data=csv,
                file_name=f"topics_table_{selected_topic.lower().replace(' ', '_')}.csv",
                mime="text/csv",
            )

        with col2:
            # –ü–æ–∫–∞–∑–∞—Ç—å JSON –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if st.button("üîç –ü–æ–∫–∞–∑–∞—Ç—å JSON"):
                st.json(filtered_df.to_dict("records"))
    else:
        st.info("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏")
