#!/usr/bin/env python3

import streamlit as st
import pandas as pd
import os
import io
from database.database import get_db
from datetime import datetime
from typing import Dict, Any, Optional
from loguru import logger


def content_view_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (—Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ)"""
    st.header("üìù –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
    st.info("üîç –†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")

    # –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db = get_db()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        content_list = db.get_all_bot_content()

        if content_list:
            # –§–∏–ª—å—Ç—Ä—ã
            col1, col2 = st.columns([3, 1])

            with col1:
                # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
                content_keys = ["–í—Å–µ"] + sorted(list(set(item["content_key"] for item in content_list)))
                content_key_filter = st.selectbox(
                    "–§–∏–ª—å—Ç—Ä –ø–æ –∫–ª—é—á—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
                    content_keys,
                    key="content_key_filter_view",
                    help="–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏",
                )

            with col2:
                if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", key="refresh_btn_view"):
                    st.rerun()

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            filtered_content = content_list

            if content_key_filter and content_key_filter != "–í—Å–µ":
                filtered_content = [item for item in filtered_content if item["content_key"] == content_key_filter]

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            if filtered_content:
                # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                df_data = []
                for item in filtered_content:
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤
                    content_preview = (
                        item["content_text"][:30] + "..." if len(item["content_text"]) > 30 else item["content_text"]
                    )

                    df_data.append(
                        {
                            "–ö–ª—é—á": item["content_key"],
                            "–¢–µ–∫—Å—Ç (30 —Å–∏–º–≤–æ–ª–æ–≤)": content_preview,
                            "–°–æ–∑–¥–∞–Ω": item["created_at"].strftime("%Y-%m-%d %H:%M") if item["created_at"] else "N/A",
                            "–û–±–Ω–æ–≤–ª–µ–Ω": item["updated_at"].strftime("%Y-%m-%d %H:%M") if item["updated_at"] else "N/A",
                        }
                    )

                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
                st.dataframe(df_data, use_container_width=True)

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                st.info(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(filtered_content)}")
            else:
                st.info("üìù –ù–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏")
        else:
            st.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        st.info("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")


def content_management_page():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º"""

    # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
    tab1, tab2, tab3, tab4 = st.tabs(["üìã –ü—Ä–æ—Å–º–æ—Ç—Ä", "‚ûï –°–æ–∑–¥–∞—Ç—å", "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"])

    with tab1:
        view_content_tab()

    with tab2:
        create_content_tab()

    with tab3:
        edit_content_tab()

    with tab4:
        content_stats_tab()


def view_content_tab():
    """–í–∫–ª–∞–¥–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    st.subheader("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞")

    # –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db = get_db()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        content_list = db.get_all_bot_content()

        if content_list:
            # –§–∏–ª—å—Ç—Ä—ã
            col1, col2 = st.columns([3, 1])

            with col1:
                # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
                content_keys = ["–í—Å–µ"] + sorted(list(set(item["content_key"] for item in content_list)))
                content_key_filter = st.selectbox(
                    "–§–∏–ª—å—Ç—Ä –ø–æ –∫–ª—é—á—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
                    content_keys,
                    key="content_key_filter",
                    help="–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏",
                )

            with col2:
                col2_1, col2_2 = st.columns(2)

                with col2_1:
                    if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", key="refresh_btn"):
                        st.rerun()

                with col2_2:
                    if st.button("üì• –°–∫–∞—á–∞—Ç—å CSV", key="download_csv_btn"):
                        download_csv(filtered_content)

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            filtered_content = content_list

            if content_key_filter and content_key_filter != "–í—Å–µ":
                filtered_content = [item for item in filtered_content if item["content_key"] == content_key_filter]

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            if filtered_content:
                # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                df_data = []
                for item in filtered_content:
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤
                    content_preview = (
                        item["content_text"][:30] + "..." if len(item["content_text"]) > 30 else item["content_text"]
                    )

                    df_data.append(
                        {
                            "–ö–ª—é—á": item["content_key"],
                            "–¢–µ–∫—Å—Ç (30 —Å–∏–º–≤–æ–ª–æ–≤)": content_preview,
                            "–°–æ–∑–¥–∞–Ω": item["created_at"].strftime("%Y-%m-%d %H:%M") if item["created_at"] else "N/A",
                            "–û–±–Ω–æ–≤–ª–µ–Ω": item["updated_at"].strftime("%Y-%m-%d %H:%M") if item["updated_at"] else "N/A",
                        }
                    )

                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
                st.dataframe(df_data, use_container_width=True)
            else:
                st.info("üìù –ù–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏")
        else:
            st.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        st.info("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")


def create_content_tab():
    """–í–∫–ª–∞–¥–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    st.subheader("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç")

    # –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db = get_db()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if not db.conn:
        st.warning("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        try:
            db.connect()
            st.success("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        except Exception as e:
            st.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            st.info("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã –∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞")
            return

    with st.form("create_content_form", clear_on_submit=True):
        col1, col2 = st.columns(2)

        with col1:
            content_key = st.text_input(
                "üîë –ö–ª—é—á –∫–æ–Ω—Ç–µ–Ω—Ç–∞*",
                placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä: welcome_message",
                help="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
            )
            language = st.selectbox("üåê –Ø–∑—ã–∫*", ["ru", "en", "kz"], index=0, help="–Ø–∑—ã–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")

        with col2:
            is_active = st.checkbox("‚úÖ –ê–∫—Ç–∏–≤–µ–Ω", value=True, help="–ë—É–¥–µ—Ç –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –±–æ—Ç—É")

        content_text = st.text_area(
            "üìÑ –¢–µ–∫—Å—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞*", height=200, placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞...", help="–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞"
        )

        col1, col2 = st.columns(2)

        with col1:
            if st.form_submit_button("üíæ –°–æ–∑–¥–∞—Ç—å", type="primary"):
                if content_key and content_text:
                    if db.create_bot_content(content_key, content_text, language, is_active):
                        st.success("‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
                        st.rerun()
                    else:
                        st.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
                else:
                    st.error("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")

        with col2:
            if st.form_submit_button("‚ùå –û—Ç–º–µ–Ω–∞"):
                st.rerun()


def edit_content_tab():
    """–í–∫–ª–∞–¥–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    st.subheader("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")

    # –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db = get_db()

    # –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    st.subheader("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞
    try:
        content_list = db.get_all_bot_content()

        if content_list:
            # –í—ã–±–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            st.write("**–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:**")

            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞
            content_options = [f"{item['content_key']} ({item['language']})" for item in content_list]
            content_indices = list(range(len(content_list)))

            selected_index = st.selectbox(
                "–ö–æ–Ω—Ç–µ–Ω—Ç:",
                content_indices,
                format_func=lambda x: content_options[x],
                key="edit_content_select",
                help="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
            )

            if selected_index is not None:
                selected_item = content_list[selected_index]

                st.write(f"**‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:** {selected_item['content_key']} ({selected_item['language']})")

                with st.form("edit_content_form"):
                    col1, col2 = st.columns(2)

                    with col1:
                        new_text = st.text_area(
                            "üìÑ –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç*",
                            value=selected_item["content_text"],
                            height=200,
                            key="edit_text",
                            help="–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
                        )

                    with col2:
                        st.write("**üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**")
                        st.write(f"**–ö–ª—é—á:** {selected_item['content_key']}")
                        st.write(f"**–Ø–∑—ã–∫:** {selected_item['language']}")
                        st.write(f"**–°—Ç–∞—Ç—É—Å:** {'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' if selected_item['is_active'] else 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}")
                        st.write(f"**–°–æ–∑–¥–∞–Ω:** {selected_item['created_at']}")
                        st.write(f"**–û–±–Ω–æ–≤–ª–µ–Ω:** {selected_item['updated_at']}")

                        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
                        if new_text and new_text != selected_item["content_text"]:
                            st.markdown("**üëÄ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:**")
                            st.info(new_text)

                    col1, col2, col3 = st.columns(3)

                    with col1:
                        if st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", type="primary"):
                            if new_text and new_text != selected_item["content_text"]:
                                if db.update_bot_content(
                                    selected_item["content_key"], new_text, selected_item["language"]
                                ):
                                    st.success("‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
                                    st.rerun()
                                else:
                                    st.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
                            elif new_text == selected_item["content_text"]:
                                st.info("‚ÑπÔ∏è –¢–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è")
                            else:
                                st.error("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç")

                    with col2:
                        if st.form_submit_button("‚ùå –û—Ç–º–µ–Ω–∞"):
                            st.rerun()

                    with col3:
                        if st.form_submit_button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –Ω–∞–≤—Å–µ–≥–¥–∞", type="secondary"):
                            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
                            st.warning("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")
                            if st.checkbox("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é –ø–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ", key="confirm_permanent_delete"):
                                if db.permanently_delete_bot_content(
                                    selected_item["content_key"], selected_item["language"]
                                ):
                                    st.success("‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")
                                    st.rerun()
                                else:
                                    st.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
                            else:
                                st.info("‚ÑπÔ∏è –ü–æ—Å—Ç–∞–≤—å—Ç–µ –≥–∞–ª–æ—á–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è")
        else:
            st.info("üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
        st.info("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")


def content_stats_tab():
    """–í–∫–ª–∞–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")

    logger.debug("content_stats_tab")

    # –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db = get_db()

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if not db.conn:
            st.warning("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
            db.connect()
            st.success("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ backend/services/statistics.sql
        try:
            # –ø—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ admin_panel: –ø–æ–¥–Ω—è—Ç—å—Å—è –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤–≤–µ—Ä—Ö –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ backend/services/statistics.sql
            sql_results = db.get_statistics()
            logger.info(f"sql_results: {sql_results}")

            if sql_results:
                # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                df_sql = pd.DataFrame(sql_results)

                # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è
                df_sql.columns = [
                    "–î–∞—Ç–∞",
                    "–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
                    "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é",
                    "–ù–æ–≤—ã–µ –ø–∞—Ä—ã",
                    "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –ø–∞—Ä—ã",
                ]

                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                st.dataframe(df_sql, use_container_width=True)

                # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
                st.subheader("üìà –ì—Ä–∞—Ñ–∏–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

                col1, col2 = st.columns(2)

                with col1:
                    # –ì—Ä–∞—Ñ–∏–∫ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    if "–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏" in df_sql.columns:
                        st.line_chart(df_sql.set_index("–î–∞—Ç–∞")["–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"])
                        st.caption("–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –¥–Ω—è–º")

                with col2:
                    # –ì—Ä–∞—Ñ–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –Ω–∞ –Ω–µ–¥–µ–ª—é
                    if "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é" in df_sql.columns:
                        st.line_chart(df_sql.set_index("–î–∞—Ç–∞")["–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é"])
                        st.caption("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é –ø–æ –¥–Ω—è–º")

                # –ì—Ä–∞—Ñ–∏–∫ –ø–∞—Ä
                col3, col4 = st.columns(2)

                with col3:
                    if "–ù–æ–≤—ã–µ –ø–∞—Ä—ã" in df_sql.columns:
                        st.line_chart(df_sql.set_index("–î–∞—Ç–∞")["–ù–æ–≤—ã–µ –ø–∞—Ä—ã"])
                        st.caption("–ù–æ–≤—ã–µ –ø–∞—Ä—ã –ø–æ –¥–Ω—è–º")

                with col4:
                    if "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –ø–∞—Ä—ã" in df_sql.columns:
                        st.line_chart(df_sql.set_index("–î–∞—Ç–∞")["–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –ø–∞—Ä—ã"])
                        st.caption("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –ø–∞—Ä—ã –ø–æ –¥–Ω—è–º")

                # –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                st.subheader("üìä –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
                col1, col2, col3, col4 = st.columns(4)

                with col1:
                    total_users = df_sql["–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"].sum()
                    st.metric("üë• –í—Å–µ–≥–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", total_users)

                with col2:
                    total_registrations = df_sql["–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é"].sum()
                    st.metric("üìÖ –í—Å–µ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π", total_registrations)

                with col3:
                    total_pairs = df_sql["–ù–æ–≤—ã–µ –ø–∞—Ä—ã"].sum()
                    st.metric("ü§ù –í—Å–µ–≥–æ –Ω–æ–≤—ã—Ö –ø–∞—Ä", total_pairs)

                with col4:
                    total_confirmed = df_sql["–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –ø–∞—Ä—ã"].sum()
                    st.metric("‚úÖ –í—Å–µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø–∞—Ä", total_confirmed)

            else:
                st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ statistics.sql –∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ –≤–µ—Ä–Ω—É–ª —Å—Ç—Ä–æ–∫")
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è statistics.sql: {e}")
            st.info("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        st.info("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã –∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞")


def download_csv(content_list):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ CSV —Ñ–æ—Ä–º–∞—Ç–µ"""
    try:
        if not content_list:
            st.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
            return

        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_data = []
        for item in content_list:
            export_data.append(
                {
                    "–ö–ª—é—á –∫–æ–Ω—Ç–µ–Ω—Ç–∞": item["content_key"],
                    "–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç": item["content_text"],
                    "–Ø–∑—ã–∫": item["language"],
                    "–°—Ç–∞—Ç—É—Å": "–ê–∫—Ç–∏–≤–µ–Ω" if item["is_active"] else "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω",
                    "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è": item["created_at"].strftime("%Y-%m-%d %H:%M:%S") if item["created_at"] else "N/A",
                    "–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è": (
                        item["updated_at"].strftime("%Y-%m-%d %H:%M:%S") if item["updated_at"] else "N/A"
                    ),
                    "ID": str(item["id"]) if "id" in item else "N/A",
                }
            )

        # –°–æ–∑–¥–∞–µ–º DataFrame
        df_export = pd.DataFrame(export_data)

        # –°–æ–∑–¥–∞–µ–º CSV –≤ –ø–∞–º—è—Ç–∏
        csv_buffer = io.StringIO()
        df_export.to_csv(
            csv_buffer, index=False, encoding="utf-8-sig"
        )  # utf-8-sig –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –≤ Excel
        csv_data = csv_buffer.getvalue()

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
        current_date = datetime.now().strftime("%Y-%m-%d_%H-%M")
        filename = f"bot_content_export_{current_date}.csv"

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        st.download_button(
            label="üì• –°–∫–∞—á–∞—Ç—å CSV —Ñ–∞–π–ª", data=csv_data, file_name=filename, mime="text/csv", key="download_csv_file"
        )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        st.success(f"‚úÖ –§–∞–π–ª –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é: {filename}")
        st.info(f"üìä –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(export_data)}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö
        with st.expander("üëÄ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö", expanded=False):
            st.dataframe(df_export, use_container_width=True)

    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è CSV —Ñ–∞–π–ª–∞: {e}")
        st.info("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")


if __name__ == "__main__":
    content_management_page()
