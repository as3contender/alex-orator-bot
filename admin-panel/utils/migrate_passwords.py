#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª–µ–π —Å SHA256 –Ω–∞ bcrypt
–ó–∞–ø—É—Å–∫–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python utils/migrate_passwords.py                    # –ë–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∞
    python utils/migrate_passwords.py --create-admin     # –°–æ–∑–¥–∞—Ç—å –∞–¥–º–∏–Ω–∞ —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø–∞—Ä–æ–ª—è
    python utils/migrate_passwords.py --admin-password "MySecurePass123!"  # –°–æ–∑–¥–∞—Ç—å –∞–¥–º–∏–Ω–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º
"""

import os
import sys
import hashlib
import logging
import argparse
import getpass
from typing import List, Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ admin-panel
current_dir = os.path.dirname(os.path.abspath(__file__))
admin_panel_root = os.path.dirname(current_dir)  # –ü–æ–¥–Ω–∏–º–∞–µ–º—Å—è –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ (–∏–∑ utils/ –≤ admin-panel/)
sys.path.append(admin_panel_root)

try:
    from security.security import get_security_manager
    from database.database import AdminDatabase
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
    print(f"üìÅ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    print(f"üìÅ –ü—É—Ç—å –∫ admin-panel: {admin_panel_root}")
    print(f"üìÅ Python path: {sys.path}")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def migrate_admin_passwords():
    """–ú–∏–≥—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    try:
        db = AdminDatabase()
        db.connect()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        with db.conn.cursor() as cursor:
            cursor.execute(
                """
                SELECT id, username, hashed_password 
                FROM users 
                WHERE is_active = true
                and telegram_id IS NULL
            """
            )
            admins = cursor.fetchall()

        migrated_count = 0

        for admin in admins:
            admin_id, username, hashed_password = admin

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä–æ–ª—å –Ω–µ None
            if not hashed_password:
                logger.warning(f"‚ö†Ô∏è –£ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {username} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–æ–ª—å")
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–∞—Ä–æ–ª—å bcrypt
            if hashed_password.startswith("$2b$"):
                logger.info(f"‚úÖ –ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {username} —É–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ bcrypt")
                continue

            # –ï—Å–ª–∏ –ø–∞—Ä–æ–ª—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ SHA256, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–±–Ω–æ–≤–∏—Ç—å
            if len(hashed_password) == 64:  # SHA256 hash length
                logger.warning(f"‚ö†Ô∏è –ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {username} –≤ —Ñ–æ—Ä–º–∞—Ç–µ SHA256")
                logger.info(f"üí° –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∏–ª–∏ —Å–±—Ä–æ—Å—å—Ç–µ –ø–∞—Ä–æ–ª—å")

        logger.info(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
        return False

    return True


def migrate_user_passwords():
    """–ú–∏–≥—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        db = AdminDatabase()
        db.connect()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        with db.conn.cursor() as cursor:
            cursor.execute(
                """
                SELECT id, username, hashed_password 
                FROM users 
                WHERE is_active = true
                and telegram_id IS NULL
            """
            )
            users = cursor.fetchall()

        migrated_count = 0

        for user in users:
            user_id, username, password_hash = user

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–∞—Ä–æ–ª—å bcrypt
            if password_hash and password_hash.startswith("$2b$"):
                logger.info(f"‚úÖ –ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} —É–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ bcrypt")
                continue

            # –ï—Å–ª–∏ –ø–∞—Ä–æ–ª—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ SHA256, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–±–Ω–æ–≤–∏—Ç—å
            if password_hash and len(password_hash) == 64:  # SHA256 hash length
                logger.warning(f"‚ö†Ô∏è –ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –≤ —Ñ–æ—Ä–º–∞—Ç–µ SHA256")
                logger.info(f"üí° –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∏–ª–∏ —Å–±—Ä–æ—Å—å—Ç–µ –ø–∞—Ä–æ–ª—å")

        logger.info(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return False

    return True


def create_default_admin(admin_password=None, force_create=False):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º"""
    try:
        db = AdminDatabase()
        db.connect()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        with db.conn.cursor() as cursor:
            cursor.execute(
                """
                SELECT COUNT(*) FROM users 
                WHERE username = 'admin' AND is_active = true AND telegram_id IS NULL
            """
            )
            admin_exists = cursor.fetchone()[0] > 0

        if admin_exists:
            logger.info("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return True

        # –ï—Å–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –∏ –Ω–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not admin_password and not force_create:
            print("‚ùì –•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é? (y/n): ", end="")
            response = input().strip().lower()

            if response not in ["y", "yes", "–¥–∞", "–¥"]:
                logger.info("‚è≠Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
                logger.info("üí° –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–∑–∂–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
                return True

        # –ï—Å–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –µ–≥–æ
        if not admin_password:
            print("üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤):")
            admin_password = getpass.getpass("–ü–∞—Ä–æ–ª—å: ")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è
            if len(admin_password) < 8:
                logger.error("‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤")
                return False

            # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤–≤–æ–¥ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            confirm_password = getpass.getpass("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ")
            if admin_password != confirm_password:
                logger.error("‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
                return False

                # –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä security_manager
        sec_manager = get_security_manager()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è
        is_valid, error_msg = sec_manager.validate_password_strength(admin_password)
        if not is_valid:
            logger.error(f"‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {error_msg}")
            logger.error("üí° –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å: –∑–∞–≥–ª–∞–≤–Ω—ã–µ, —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã")
            return False

        # –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
        hashed_password = sec_manager.hash_password(admin_password)

        # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        with db.conn.cursor() as cursor:
            cursor.execute(
                """
                INSERT INTO users (username, hashed_password, telegram_id)
                VALUES (%s, %s, %s)
            """,
                ("admin", hashed_password, None),  # NULL –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            )
            db.conn.commit()

        logger.info("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ–∑–¥–∞–Ω")
        logger.info(f"üîë –õ–æ–≥–∏–Ω: admin")
        if not admin_password.startswith("*"):  # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª—å, –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
            logger.info(f"üîë –ü–∞—Ä–æ–ª—å: {admin_password}")
        logger.warning("‚ö†Ô∏è –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞!")

        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {e}")
        return False


def parse_arguments():
    """–ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(
        description="–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª–µ–π –∏ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python utils/migrate_passwords.py                    # –¢–æ–ª—å–∫–æ –º–∏–≥—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª–µ–π
  python utils/migrate_passwords.py --create-admin     # –°–æ–∑–¥–∞—Ç—å –∞–¥–º–∏–Ω–∞ —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø–∞—Ä–æ–ª—è
  python utils/migrate_passwords.py --admin-password "MySecurePass123!"  # –°–æ–∑–¥–∞—Ç—å –∞–¥–º–∏–Ω–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º
        """,
    )

    parser.add_argument("--create-admin", action="store_true", help="–°–æ–∑–¥–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø–∞—Ä–æ–ª—è")

    parser.add_argument(
        "--admin-password",
        type=str,
        help="–ü–∞—Ä–æ–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ)",
    )

    parser.add_argument(
        "--skip-migration", action="store_true", help="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é –ø–∞—Ä–æ–ª–µ–π, —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
    )

    return parser.parse_args()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏"""
    args = parse_arguments()

    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        db = AdminDatabase()
        db.connect()
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

    # –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª–∏ (–µ—Å–ª–∏ –Ω–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ)
    success = True

    if not args.skip_migration:
        if not migrate_admin_passwords():
            success = False

        if not migrate_user_passwords():
            success = False
    else:
        logger.info("‚è≠Ô∏è –ú–∏–≥—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª–µ–π –ø—Ä–æ–ø—É—â–µ–Ω–∞")

    # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ)
    if args.create_admin or args.admin_password:
        logger.info("üîß –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
        if not create_default_admin(admin_password=args.admin_password, force_create=True):
            success = False
    else:
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        logger.info("üîß –•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é?")
        logger.info("   –≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
        if not create_default_admin():
            success = False

    if success:
        logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        logger.info("üîí –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:")
        logger.info("   1. –°–æ–∑–¥–∞–π—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
        logger.info("   2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ HTTPS –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        logger.info("   3. –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ –ø–∞—Ä–æ–ª–∏")
        logger.info("   4. –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    else:
        logger.error("‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")

    return success


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
