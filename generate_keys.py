#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∫–ª—é—á–µ–π –¥–ª—è Alex Orator Bot
–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç JWT_SECRET_KEY, SECRET_KEY –∏ DB_PASSWORD –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ .env —Ñ–∞–π–ª–µ
"""

import secrets
import string
import base64
import os
from datetime import datetime


def generate_jwt_secret_key(length=64):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT_SECRET_KEY"""
    alphabet = string.ascii_letters + string.digits + "!@#$%^&*()_+-=[]{}|;:,.<>?"
    return "".join(secrets.choice(alphabet) for _ in range(length))


def generate_secret_key(length=32):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è SECRET_KEY"""
    random_bytes = secrets.token_bytes(length)
    return base64.b64encode(random_bytes).decode("utf-8")


def generate_secure_password(length=20):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    lowercase = string.ascii_lowercase
    uppercase = string.ascii_uppercase
    digits = string.digits
    symbols = "!@#$%^&*()_+-=[]{}|;:,.<>?"

    # –ú–∏–Ω–∏–º—É–º –ø–æ –æ–¥–Ω–æ–º—É —Å–∏–º–≤–æ–ª—É –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
    password = [secrets.choice(lowercase), secrets.choice(uppercase), secrets.choice(digits), secrets.choice(symbols)]

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    all_chars = lowercase + uppercase + digits + symbols
    password.extend(secrets.choice(all_chars) for _ in range(length - 4))

    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º
    password_list = list(password)
    secrets.SystemRandom().shuffle(password_list)
    return "".join(password_list)


def verify_key_strength(key, key_type):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–ª—ã –∫–ª—é—á–∞"""
    score = 0
    feedback = []

    # –î–ª–∏–Ω–∞
    if len(key) >= 32:
        score += 2
    elif len(key) >= 16:
        score += 1
    else:
        feedback.append("–ö–ª—é—á —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")

    # –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Å–∏–º–≤–æ–ª–æ–≤
    has_lower = any(c.islower() for c in key)
    has_upper = any(c.isupper() for c in key)
    has_digit = any(c.isdigit() for c in key)
    has_special = any(c in "!@#$%^&*()_+-=[]{}|;:,.<>?" for c in key)

    if has_lower:
        score += 1
    if has_upper:
        score += 1
    if has_digit:
        score += 1
    if has_special:
        score += 1

    # –≠–Ω—Ç—Ä–æ–ø–∏—è
    unique_chars = len(set(key))
    if unique_chars >= len(key) * 0.7:
        score += 1

    # –û—Ü–µ–Ω–∫–∞
    if score >= 5:
        strength = "üîí –û—Ç–ª–∏—á–Ω–∞—è"
    elif score >= 4:
        strength = "üü¢ –•–æ—Ä–æ—à–∞—è"
    elif score >= 3:
        strength = "üü° –°—Ä–µ–¥–Ω—è—è"
    else:
        strength = "üî¥ –°–ª–∞–±–∞—è"

    print(f"{key_type}: {strength} ({score}/6)")
    if feedback:
        print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {', '.join(feedback)}")


def generate_all_keys():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–ª—é—á–µ–π"""
    print("üîê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∫–ª—é—á–µ–π –¥–ª—è Alex Orator Bot")
    print("=" * 60)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á–∏
    jwt_secret = generate_jwt_secret_key(64)
    secret_key = generate_secret_key(32)
    db_password = generate_secure_password(20)

    print(f"üìÖ –î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()

    print("üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏:")
    print("-" * 40)
    print(f"JWT_SECRET_KEY={jwt_secret}")
    print(f"SECRET_KEY={secret_key}")
    print(f"DB_PASSWORD={db_password}")
    print()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    print("üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:")
    print("-" * 40)
    print(f"‚úÖ JWT_SECRET_KEY: {len(jwt_secret)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"‚úÖ SECRET_KEY: {len(secret_key)} —Å–∏–º–≤–æ–ª–æ–≤ (base64)")
    print(f"‚úÖ DB_PASSWORD: {len(db_password)} —Å–∏–º–≤–æ–ª–æ–≤")
    print()

    # –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª
    env_content = f"""# Alex Orator Bot - –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

# Telegram Bot
BOT_TOKEN=your_telegram_bot_token_here

# Backend API
BACKEND_URL=http://localhost:8000
API_TIMEOUT=30
API_RETRY_ATTEMPTS=3
API_RETRY_DELAY=1

# –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤)
APP_DATABASE_URL=postgresql://alex_orator:{db_password}@app-db:5432/app_db

# –ü–∞—Ä–æ–ª—å –¥–ª—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
DB_PASSWORD={db_password}

# JWT –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
JWT_SECRET_KEY={jwt_secret}
SECRET_KEY={secret_key}

# OpenAI (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è –±—É–¥—É—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π)
OPENAI_API_KEY=your_openai_api_key_here

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
LOG_LEVEL=INFO
DEBUG=false

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
DEFAULT_LANGUAGE=ru
MAX_PAIRS_PER_USER=3
DEFAULT_MATCHING_LIMIT=5
"""

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    with open(".env", "w", encoding="utf-8") as f:
        f.write(env_content)

    print("üíæ –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω —Å –Ω–æ–≤—ã–º–∏ –∫–ª—é—á–∞–º–∏!")
    print()

    print("‚ö†Ô∏è  –í–ê–ñ–ù–û:")
    print("- –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–∏ –∫–ª—é—á–∏ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ")
    print("- –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∫–æ–º–º–∏—Ç—å—Ç–µ .env —Ñ–∞–π–ª –≤ git")
    print("- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ –∫–ª—é—á–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏–π")
    print("- –†–µ–≥—É–ª—è—Ä–Ω–æ —Ä–æ—Ç–∏—Ä—É–π—Ç–µ –∫–ª—é—á–∏ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ")
    print()

    print("üöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ —É @BotFather")
    print("2. –ó–∞–º–µ–Ω–∏—Ç–µ 'your_telegram_bot_token_here' –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω")
    print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É: ./start.sh start")
    print()

    return {"jwt_secret": jwt_secret, "secret_key": secret_key, "db_password": db_password}


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        keys = generate_all_keys()

        print("üîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:")
        print("-" * 40)
        verify_key_strength(keys["jwt_secret"], "JWT_SECRET_KEY")
        verify_key_strength(keys["secret_key"], "SECRET_KEY")
        verify_key_strength(keys["db_password"], "DB_PASSWORD")
        print()

        print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π: {e}")
        return 1

    return 0


if __name__ == "__main__":
    exit(main())
