#!/usr/bin/env python3

import psycopg2
from psycopg2.extras import RealDictCursor
from typing import Optional, List, Dict, Any
from urllib.parse import quote_plus
import os
from datetime import datetime


class AdminDatabase:
    def __init__(self):
        self.conn = None
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        password = "?%Lv6u*TgAD#+rMRcHob"
        encoded_password = quote_plus(password)
        self.database_url = f"postgresql://alex_orator:{encoded_password}@localhost:5434/app_db"
        print(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ: postgresql://alex_orator:***@localhost:5434/app_db")
    
    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.conn = psycopg2.connect(self.database_url)
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise
    
    def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        if self.conn:
            self.conn.close()
            self.conn = None
            print("‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
    
    def get_all_bot_content(self, language: str = None, is_active: bool = None) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç –±–æ—Ç–∞"""
        try:
            if not self.conn:
                self.connect()
            
            query = "SELECT id, content_key, content_text, language, is_active, created_at, updated_at FROM bot_content WHERE 1=1"
            params = []
            param_count = 0
            
            if language:
                param_count += 1
                query += f" AND language = %s"
                params.append(language)
            
            if is_active is not None:
                param_count += 1
                query += f" AND is_active = %s"
                params.append(is_active)
            
            query += " ORDER BY content_key, language"
            
            print(f"üîç –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å: {query}")
            print(f"üìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
            
            with self.conn.cursor(cursor_factory=RealDictCursor) as cursor:
                cursor.execute(query, params)
                rows = cursor.fetchall()
                result = [dict(row) for row in rows]
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(result)} –∑–∞–ø–∏—Å–µ–π")
                return result
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
            return []
    
    def create_bot_content(self, content_key: str, content_text: str, language: str = "ru", is_active: bool = True) -> Optional[Dict[str, Any]]:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"""
        try:
            if not self.conn:
                self.connect()
            
            with self.conn.cursor(cursor_factory=RealDictCursor) as cursor:
                cursor.execute("""
                    INSERT INTO bot_content (content_key, content_text, language, is_active)
                    VALUES (%s, %s, %s, %s)
                    RETURNING id, content_key, content_text, language, is_active, created_at, updated_at
                    """,
                    (content_key, content_text, language, is_active)
                )
                row = cursor.fetchone()
                self.conn.commit()
                return dict(row) if row else None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
            if self.conn:
                self.conn.rollback()
            return None
    
    def update_bot_content(self, content_key: str, content_text: str, language: str = "ru") -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç"""
        try:
            if not self.conn:
                self.connect()
            
            with self.conn.cursor() as cursor:
                cursor.execute("""
                    UPDATE bot_content 
                    SET content_text = %s, updated_at = CURRENT_TIMESTAMP 
                    WHERE content_key = %s AND language = %s
                    """,
                    (content_text, content_key, language)
                )
                self.conn.commit()
                return cursor.rowcount > 0
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
            if self.conn:
                self.conn.rollback()
            return False
    
    def delete_bot_content(self, content_key: str, language: str = "ru") -> bool:
        """–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç (–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å)"""
        try:
            if not self.conn:
                self.connect()
            
            with self.conn.cursor() as cursor:
                cursor.execute(
                    "UPDATE bot_content SET is_active = FALSE, updated_at = CURRENT_TIMESTAMP WHERE content_key = %s AND language = %s",
                    (content_key, language)
                )
                self.conn.commit()
                return cursor.rowcount > 0
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
            if self.conn:
                self.conn.rollback()
            return False
    
    def permanently_delete_bot_content(self, content_key: str, language: str = "ru") -> bool:
        """–ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if not self.conn:
                self.connect()
            
            with self.conn.cursor() as cursor:
                cursor.execute(
                    "DELETE FROM bot_content WHERE content_key = %s AND language = %s",
                    (content_key, language)
                )
                self.conn.commit()
                return cursor.rowcount > 0
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
            if self.conn:
                self.conn.rollback()
            return False
    
    def get_users_with_problems(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        try:
            if not self.conn:
                self.connect()
            
            query = """
                SELECT id, telegram_id, username, first_name, last_name, 
                       gender, registration_date, total_sessions, 
                       feedback_count, is_active, created_at, updated_at
                FROM users 
                WHERE username IS NULL OR username = '' 
                   OR first_name IS NULL OR first_name = ''
                   OR last_name IS NULL OR last_name = ''
                   OR gender IS NULL OR gender = ''
                ORDER BY created_at DESC
            """
            
            print(f"üîç –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å: {query}")
            
            with self.conn.cursor(cursor_factory=RealDictCursor) as cursor:
                cursor.execute(query)
                rows = cursor.fetchall()
                result = [dict(row) for row in rows]
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(result)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
                return result
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: {e}")
            return []
    
    def fix_user_data(self, telegram_id: int, username: str = None, first_name: str = None, last_name: str = None, gender: str = None) -> bool:
        """–ò—Å–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            if not self.conn:
                self.connect()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π UPDATE –∑–∞–ø—Ä–æ—Å
            update_fields = []
            params = []
            
            if username is not None:
                update_fields.append("username = %s")
                params.append(username)
            if first_name is not None:
                update_fields.append("first_name = %s")
                params.append(first_name)
            if last_name is not None:
                update_fields.append("last_name = %s")
                params.append(last_name)
            if gender is not None:
                update_fields.append("gender = %s")
                params.append(gender)
            
            if not update_fields:
                print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã –ø–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                return False
            
            update_fields.append("updated_at = CURRENT_TIMESTAMP")
            params.append(telegram_id)
            
            query = f"UPDATE users SET {', '.join(update_fields)} WHERE telegram_id = %s"
            
            with self.conn.cursor() as cursor:
                cursor.execute(query, params)
                self.conn.commit()
                return cursor.rowcount > 0
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            if self.conn:
                self.conn.rollback()
            return False
    
    def delete_problem_user(self, telegram_id: int) -> bool:
        """–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            if not self.conn:
                self.connect()
            
            with self.conn.cursor() as cursor:
                cursor.execute(
                    "DELETE FROM users WHERE telegram_id = %s",
                    (telegram_id,)
                )
                self.conn.commit()
                return cursor.rowcount > 0
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            if self.conn:
                self.conn.rollback()
            return False
    
    def activate_bot_content(self, content_key: str, language: str = "ru") -> bool:
        """–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç"""
        try:
            if not self.conn:
                self.connect()
            
            with self.conn.cursor() as cursor:
                cursor.execute(
                    "UPDATE bot_content SET is_active = TRUE, updated_at = CURRENT_TIMESTAMP WHERE content_key = %s AND language = %s",
                    (content_key, language)
                )
                self.conn.commit()
                return cursor.rowcount > 0
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
            if self.conn:
                self.conn.rollback()
            return False
    
    def execute_sql_file(self, sql_file_path: str) -> List[Dict[str, Any]]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å SQL –∏–∑ —Ñ–∞–π–ª–∞ –∏ –≤–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        try:
            # –†–∞–∑—Ä–µ—à–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –æ—Ç –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
            if not os.path.isabs(sql_file_path):
                base_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
                sql_file_path = os.path.abspath(os.path.join(base_dir, sql_file_path))
            
            print(f"üìÅ –í—ã–ø–æ–ª–Ω—è–µ–º SQL –∏–∑ —Ñ–∞–π–ª–∞: {sql_file_path}")
            
            with open(sql_file_path, "r", encoding="utf-8") as f:
                sql = f.read()
            
            with self.conn.cursor(cursor_factory=RealDictCursor) as cursor:
                cursor.execute(sql)
                rows = cursor.fetchall()
                result = [dict(row) for row in rows]
                print(f"‚úÖ SQL –≤—ã–ø–æ–ª–Ω–µ–Ω, –ø–æ–ª—É—á–µ–Ω–æ {len(result)} —Å—Ç—Ä–æ–∫")
                return result
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL –∏–∑ —Ñ–∞–π–ª–∞ '{sql_file_path}': {e}")
            return []

    def get_language_statistics(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —è–∑—ã–∫–∞–º"""
        try:
            cursor = self.conn.cursor(cursor_factory=RealDictCursor)
            cursor.execute("""
                SELECT language, COUNT(*) as count 
                FROM bot_content 
                WHERE language IS NOT NULL 
                GROUP BY language 
                ORDER BY count DESC
            """)
            return cursor.fetchall()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —è–∑—ã–∫–∞–º: {e}")
            return []

    def get_table_columns(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–æ–Ω–∫–∞—Ö —Ç–∞–±–ª–∏—Ü—ã bot_content"""
        try:
            cursor = self.conn.cursor(cursor_factory=RealDictCursor)
            cursor.execute("""
                SELECT 
                    column_name,
                    data_type,
                    is_nullable,
                    column_default,
                    character_maximum_length
                FROM information_schema.columns 
                WHERE table_name = 'bot_content' 
                ORDER BY ordinal_position
            """)
            columns = cursor.fetchall()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            enhanced_columns = []
            for col in columns:
                enhanced_col = dict(col)
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                enhanced_col['tags'] = self._get_column_tags(col['column_name'])
                enhanced_col['placeholder'] = self._get_column_placeholder(col['column_name'])
                enhanced_col['description'] = self._get_column_description(col['column_name'])
                enhanced_columns.append(enhanced_col)
            
            return enhanced_columns
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–æ–Ω–∫–∞—Ö: {e}")
            return []

    def _get_column_tags(self, column_name):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–≥–∏ –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ (–∑–∞–≥–ª—É—à–∫–∞)"""
        tags_map = {
            'key': '–∫–ª—é—á, –æ—Å–Ω–æ–≤–Ω–æ–π, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π',
            'content': '–∫–æ–Ω—Ç–µ–Ω—Ç, —Ç–µ–∫—Å—Ç, –æ—Å–Ω–æ–≤–Ω–æ–π',
            'language': '—è–∑—ã–∫, –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è',
            'status': '—Å—Ç–∞—Ç—É—Å, —Å–æ—Å—Ç–æ—è–Ω–∏–µ',
            'created_at': '–¥–∞—Ç–∞, –≤—Ä–µ–º—è, —Å–æ–∑–¥–∞–Ω–∏–µ',
            'updated_at': '–¥–∞—Ç–∞, –≤—Ä–µ–º—è, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ'
        }
        return tags_map.get(column_name, '–æ–±—â–∏–π')

    def _get_column_placeholder(self, column_name):
        """–ü–æ–ª—É—á–∞–µ—Ç placeholder –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ (–∑–∞–≥–ª—É—à–∫–∞)"""
        placeholder_map = {
            'key': '2025-03-02_00T3-012208',
            'content': '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞...',
            'language': 'ru, en, de',
            'status': 'active, inactive, draft',
            'created_at': '2025-01-01 00:00:00',
            'updated_at': '2025-01-01 00:00:00'
        }
        return placeholder_map.get(column_name, '–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ...')

    def _get_column_description(self, column_name):
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ (–∑–∞–≥–ª—É—à–∫–∞)"""
        description_map = {
            'key': '–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á —Ç–∞–±–ª–∏—Ü—ã (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω)',
            'content': '–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞',
            'language': '–Ø–∑—ã–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (ru, en, de)',
            'status': '–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (active, inactive, draft)',
            'created_at': '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏',
            'updated_at': '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'
        }
        return description_map.get(column_name, '–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏')

    # ============================================================================
    # –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê–ú–ò
    # ============================================================================
    
    def get_admin_by_username(self, username: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ username"""
        try:
            if not self.conn:
                self.connect()
            
            with self.conn.cursor(cursor_factory=RealDictCursor) as cursor:
                cursor.execute("""
                    SELECT id, username, hashed_password, full_name, role, is_active, 
                           last_login, created_at, updated_at
                    FROM admin_users 
                    WHERE username = %s AND is_active = TRUE
                """, (username,))
                row = cursor.fetchone()
                return dict(row) if row else None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            return None
    
    def update_admin_last_login(self, username: str) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            if not self.conn:
                self.connect()
            
            with self.conn.cursor() as cursor:
                cursor.execute("""
                    UPDATE admin_users 
                    SET last_login = CURRENT_TIMESTAMP 
                    WHERE username = %s
                """, (username,))
                self.conn.commit()
                return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—Ö–æ–¥–∞: {e}")
            if self.conn:
                self.conn.rollback()
            return False
    
    def create_admin_user(self, username: str, hashed_password: str, full_name: str, role: str = 'admin') -> Optional[Dict[str, Any]]:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            if not self.conn:
                self.connect()
            
            with self.conn.cursor(cursor_factory=RealDictCursor) as cursor:
                cursor.execute("""
                    INSERT INTO admin_users (username, hashed_password, full_name, role)
                    VALUES (%s, %s, %s, %s)
                    RETURNING id, username, full_name, role, is_active, created_at, updated_at
                """, (username, hashed_password, full_name, role))
                row = cursor.fetchone()
                self.conn.commit()
                return dict(row) if row else None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            if self.conn:
                self.conn.rollback()
            return None
    
    def update_admin_user(self, username: str, **kwargs) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            if not self.conn:
                self.connect()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º SET —á–∞—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
            set_parts = []
            params = []
            for key, value in kwargs.items():
                if key in ['full_name', 'role', 'is_active', 'hashed_password']:
                    set_parts.append(f"{key} = %s")
                    params.append(value)
            
            if not set_parts:
                return False
            
            params.append(username)
            query = f"""
                UPDATE admin_users 
                SET {', '.join(set_parts)}
                WHERE username = %s
            """
            
            with self.conn.cursor() as cursor:
                cursor.execute(query, params)
                self.conn.commit()
                return cursor.rowcount > 0
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            if self.conn:
                self.conn.rollback()
            return False
    
    def delete_admin_user(self, username: str) -> bool:
        """–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ - –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è)"""
        try:
            if not self.conn:
                self.connect()
            
            with self.conn.cursor() as cursor:
                cursor.execute("""
                    UPDATE admin_users 
                    SET is_active = FALSE 
                    WHERE username = %s
                """, (username,))
                self.conn.commit()
                return cursor.rowcount > 0
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            if self.conn:
                self.conn.rollback()
            return False
    
    def get_all_admin_users(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
        try:
            if not self.conn:
                self.connect()
            
            with self.conn.cursor(cursor_factory=RealDictCursor) as cursor:
                cursor.execute("""
                    SELECT id, username, full_name, role, is_active, 
                           last_login, created_at, updated_at
                    FROM admin_users 
                    ORDER BY created_at DESC
                """)
                rows = cursor.fetchall()
                return [dict(row) for row in rows]
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
            return []

    def get_all_users(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users"""
        try:
            if not self.conn:
                self.connect()
            
            with self.conn.cursor(cursor_factory=RealDictCursor) as cursor:
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å —Ä–æ–ª—å—é
                try:
                    cursor.execute("""
                        SELECT id, telegram_id, username, first_name, last_name, 
                               gender, registration_date, total_sessions, 
                               feedback_count, is_active, created_at, updated_at, password, role
                        FROM users 
                        ORDER BY created_at DESC
                    """)
                    rows = cursor.fetchall()
                    result = [dict(row) for row in rows]
                    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(result)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—è–º–∏")
                    return result
                except Exception as role_error:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å —Ä–æ–ª—è–º–∏: {role_error}")
                    print("üîÑ –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –±–µ–∑ —Ä–æ–ª–µ–π...")
                    
                    # Fallback - –ø–æ–ª—É—á–∞–µ–º –±–µ–∑ —Ä–æ–ª–∏
                    cursor.execute("""
                        SELECT id, telegram_id, username, first_name, last_name, 
                               gender, registration_date, total_sessions, 
                               feedback_count, is_active, created_at, updated_at, password
                        FROM users 
                        ORDER BY created_at DESC
                    """)
                    rows = cursor.fetchall()
                    result = [dict(row) for row in rows]
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    for user in result:
                        user['role'] = 'user'
                    
                    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(result)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —Ä–æ–ª–µ–π (—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ä–æ–ª—å 'user' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
                    return result
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []

    def create_user(self, username: str, password: str, role: str = "user", 
                   full_name: str = None, email: str = None, 
                   telegram_id: str = None) -> bool:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            print(f"üîç [DB] –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}")
            print(f"üé≠ [DB] –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {role}")
            
            if not self.conn:
                print("üîó [DB] –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
                self.connect()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º UUID –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            import uuid
            user_id = str(uuid.uuid4())
            print(f"üÜî [DB] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω ID: {user_id}")
            
            # –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ö–µ—à –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
            import hashlib
            hashed_password = hashlib.sha256(password.encode()).hexdigest()
            print(f"üîí [DB] –ü–∞—Ä–æ–ª—å –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            first_name = full_name if full_name else username
            last_name = full_name if full_name else username
            telegram_id_val = telegram_id if telegram_id else None
            
            print(f"üìù [DB] –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
            print(f"   [DB] First name: {first_name}")
            print(f"   [DB] Last name: {last_name}")
            print(f"   [DB] Telegram ID: {telegram_id_val}")
            print(f"   [DB] Role: {role}")
            
            with self.conn.cursor() as cursor:
                print("üìã [DB] –í—ã–ø–æ–ª–Ω—è–µ–º INSERT –∑–∞–ø—Ä–æ—Å...")
                
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ role –≤ —Ç–∞–±–ª–∏—Ü–µ
                try:
                    cursor.execute("""
                        INSERT INTO users (id, username, first_name, last_name, 
                                         telegram_id, is_active, gender, password, role,
                                         created_at, updated_at)
                        VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
                    """, (
                        user_id, username, first_name, last_name, 
                        telegram_id_val, True, 'other', hashed_password, role,
                        datetime.now(), datetime.now()
                    ))
                    print(f"‚úÖ [DB] INSERT —Å —Ä–æ–ª—å—é –≤—ã–ø–æ–ª–Ω–µ–Ω, affected rows: {cursor.rowcount}")
                except Exception as role_error:
                    print(f"‚ö†Ô∏è [DB] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ —Å —Ä–æ–ª—å—é: {role_error}")
                    print("üîÑ [DB] –ü—Ä–æ–±—É–µ–º –≤—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ —Ä–æ–ª–∏...")
                    
                    # Fallback - –≤—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ —Ä–æ–ª–∏
                    cursor.execute("""
                        INSERT INTO users (id, username, first_name, last_name, 
                                         telegram_id, is_active, gender, password,
                                         created_at, updated_at)
                        VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
                    """, (
                        user_id, username, first_name, last_name, 
                        telegram_id_val, True, 'other', hashed_password,
                        datetime.now(), datetime.now()
                    ))
                    print(f"‚úÖ [DB] INSERT –±–µ–∑ —Ä–æ–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω, affected rows: {cursor.rowcount}")
                
                self.conn.commit()
                print(f"‚úÖ [DB] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
                return True
        except Exception as e:
            print(f"‚ùå [DB] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            import traceback
            traceback.print_exc()
            if self.conn:
                self.conn.rollback()
            return False

    def get_user_by_username(self, username: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users"""
        try:
            if not self.conn:
                self.connect()
            
            with self.conn.cursor(cursor_factory=RealDictCursor) as cursor:
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å —Ä–æ–ª—å—é
                try:
                    cursor.execute("""
                        SELECT id, username, first_name, last_name, 
                               telegram_id, is_active, gender, password, role,
                               created_at, updated_at
                        FROM users 
                        WHERE username = %s AND is_active = TRUE
                    """, (username,))
                    row = cursor.fetchone()
                    if row:
                        user_data = dict(row)
                        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —Å —Ä–æ–ª—å—é: {user_data.get('role', 'user')}")
                        return user_data
                    return None
                except Exception as role_error:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å —Ä–æ–ª—å—é: {role_error}")
                    print("üîÑ –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –±–µ–∑ —Ä–æ–ª–∏...")
                    
                    # Fallback - –ø–æ–ª—É—á–∞–µ–º –±–µ–∑ —Ä–æ–ª–∏
                    cursor.execute("""
                        SELECT id, username, first_name, last_name, 
                               telegram_id, is_active, gender, password,
                               created_at, updated_at
                        FROM users 
                        WHERE username = %s AND is_active = TRUE
                    """, (username,))
                    row = cursor.fetchone()
                    if row:
                        user_data = dict(row)
                        user_data['role'] = 'user'  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –±–µ–∑ —Ä–æ–ª–∏ (—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ä–æ–ª—å 'user' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
                        return user_data
                    return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return None

    def update_user_role(self, username: str, new_role: str) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            print(f"üîÑ [DB] –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –Ω–∞ {new_role}")
            
            if not self.conn:
                self.connect()
            
            with self.conn.cursor() as cursor:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ role –≤ —Ç–∞–±–ª–∏—Ü–µ
                try:
                    cursor.execute("""
                        UPDATE users 
                        SET role = %s, updated_at = %s
                        WHERE username = %s AND is_active = TRUE
                    """, (new_role, datetime.now(), username))
                    
                    if cursor.rowcount > 0:
                        self.conn.commit()
                        print(f"‚úÖ [DB] –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {new_role}")
                        return True
                    else:
                        print(f"‚ùå [DB] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
                        return False
                        
                except Exception as role_error:
                    print(f"‚ö†Ô∏è [DB] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏: {role_error}")
                    print("üîÑ [DB] –í–æ–∑–º–æ–∂–Ω–æ, –∫–æ–ª–æ–Ω–∫–∞ role –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    return False
                    
        except Exception as e:
            print(f"‚ùå [DB] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–ª–∏: {e}")
            if self.conn:
                self.conn.rollback()
            return False

    def delete_user(self, user_id: str) -> bool:
        """–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID"""
        try:
            print(f"üóëÔ∏è [DB] –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: {user_id}")
            
            if not self.conn:
                self.connect()
            
            with self.conn.cursor() as cursor:
                # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                cursor.execute("SELECT username FROM users WHERE id = %s", (user_id,))
                user_info = cursor.fetchone()
                username = user_info[0] if user_info else "Unknown"
                
                print(f"üóëÔ∏è [DB] –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}")
                
                # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                cursor.execute("DELETE FROM users WHERE id = %s", (user_id,))
                
                if cursor.rowcount > 0:
                    self.conn.commit()
                    print(f"‚úÖ [DB] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
                    return True
                else:
                    print(f"‚ùå [DB] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return False
                    
        except Exception as e:
            print(f"‚ùå [DB] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            if self.conn:
                self.conn.rollback()
            return False


# –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
db = AdminDatabase()


def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    db.connect()


def close_database():
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    db.disconnect()


# –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Streamlit
def get_db():
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    return db
