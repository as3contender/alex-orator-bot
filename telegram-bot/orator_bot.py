import asyncio
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from loguru import logger

from config import BOT_TOKEN, BACKEND_URL
from handlers import CommandHandler as OratorCommandHandler, CallbackHandler as OratorCallbackHandler
from error_handler import ErrorHandler
from orator_api_client import OratorAPIClient
from bot_content_manager import BotContentManager

from telegram import ReplyKeyboardMarkup, KeyboardButton

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)


class AlexOratorBot:
    def __init__(self):
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.api_client = OratorAPIClient(BACKEND_URL)
        self.content_manager = BotContentManager(self.api_client)
        self.command_handler = OratorCommandHandler(self.api_client, self.content_manager)
        self.callback_handler = OratorCallbackHandler(self.api_client, self.content_manager, self.command_handler)
        self.error_handler = ErrorHandler()

        self._setup_handlers()
        self._setup_error_handler()

    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""

        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.command_handler.start_command))
        self.application.add_handler(CommandHandler("help", self.command_handler.help_command))
        self.application.add_handler(CommandHandler("menu", self.command_handler.menu_command))
        self.application.add_handler(CommandHandler("mytasks", self.command_handler.mytasks_command))

        # –ö–æ–º–∞–Ω–¥—ã –ø–æ–∏—Å–∫–∞ –∏ –ø–∞—Ä
        self.application.add_handler(CommandHandler("find", self.command_handler.find_command))
        self.application.add_handler(CommandHandler("pairs", self.command_handler.pairs_command))

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é
        self.menu_keyboard = self._build_menu_keyboard()
        self._setup_menu_handler()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ (–∫–Ω–æ–ø–∫–∏)
        self.application.add_handler(CallbackQueryHandler(self.callback_handler.handle_callback))

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(
            MessageHandler(filters.TEXT & ~filters.COMMAND, self.command_handler.handle_text_message)
        )

    def _setup_error_handler(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫"""
        self.application.add_error_handler(self.error_handler.handle_error)

    def _build_menu_keyboard(self) -> ReplyKeyboardMarkup:
        return ReplyKeyboardMarkup(
            [
                [KeyboardButton("üöÄ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"), KeyboardButton("üë• –ú–æ–∏ –ø–∞—Ä—ã")],
                [KeyboardButton("üîç –ü–æ–∏—Å–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤"), KeyboardButton("üóí –ú–æ–∏ –∑–∞–¥–∞—á–∏")],
                [KeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"), KeyboardButton("‚ùì –ü–æ–º–æ—â—å")],
            ],
            resize_keyboard=True,
            one_time_keyboard=False,
        )

    def _setup_menu_handler(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –º–µ–Ω—é"""
        self.application.add_handler(
            MessageHandler(filters.TEXT & filters.Regex(r"^üë• –ú–æ–∏ –ø–∞—Ä—ã$"), self._handle_pairs_message)
        )
        self.application.add_handler(
            MessageHandler(filters.TEXT & filters.Regex(r"^üóí –ú–æ–∏ –∑–∞–¥–∞—á–∏$"), self._handle_mytasks_message)
        )
        self.application.add_handler(
            MessageHandler(filters.TEXT & filters.Regex(r"^üöÄ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è$"), self._handle_register_message)
        )
        self.application.add_handler(
            MessageHandler(filters.TEXT & filters.Regex(r"^‚ùì –ü–æ–º–æ—â—å$"), self._handle_help_message)
        )
        self.application.add_handler(
            MessageHandler(filters.TEXT & filters.Regex(r"^üîç –ü–æ–∏—Å–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤$"), self._handle_find_candidates_message)
        )
        self.application.add_handler(
            MessageHandler(filters.TEXT & filters.Regex(r"^üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞$"), self._handle_restart_bot_message)
        )

    async def _handle_find_candidates_message(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤"""
        try:
            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if not await self.command_handler._authenticate_user(update):
                await update.message.reply_text("–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
                return

            language = await self.command_handler._get_user_language(update)

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º find_candidates_handler –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            # –°–æ–∑–¥–∞–µ–º mock query –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å callback handler
            from telegram import CallbackQuery

            mock_query = type(
                "MockQuery",
                (),
                {
                    "edit_message_text": update.message.reply_text,
                    "message": update.message,
                    "from_user": update.effective_user,
                },
            )()
            await self.callback_handler._handle_find_callback(mock_query, language)

        except Exception as e:
            logger.error(f"Find candidates message handler error: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

    async def _handle_restart_bot_message(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
        try:
            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if not await self.command_handler._authenticate_user(update):
                await update.message.reply_text("–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
                return

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º restart_bot_handler –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await self.command_handler.start_command(update, context)

        except Exception as e:
            logger.error(f"Restart bot message handler error: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

    async def _handle_pairs_message(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–∞—Ä"""
        try:
            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if not await self.command_handler._authenticate_user(update):
                await update.message.reply_text("–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
                return

            language = await self.command_handler._get_user_language(update)

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º pairs_handler –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await self.callback_handler.pairs_handler.handle_pairs_message(update, language)

        except Exception as e:
            logger.error(f"Pairs message handler error: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

    async def _handle_mytasks_message(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞–Ω–∏–π"""
        try:
            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if not await self.command_handler._authenticate_user(update):
                await update.message.reply_text("–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
                return

            language = await self.command_handler._get_user_language(update)

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é –ª–æ–≥–∏–∫—É –∏–∑ command_handler
            await self.command_handler._handle_mytasks_common(language, update.message.reply_text)

        except Exception as e:
            logger.error(f"MyTasks message handler error: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

    async def _handle_register_message(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        try:
            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if not await self.command_handler._authenticate_user(update):
                await update.message.reply_text("–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
                return

            language = await self.command_handler._get_user_language(update)

            # –°–æ–∑–¥–∞–µ–º mock query –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å callback handler
            from telegram import CallbackQuery

            mock_query = type(
                "MockQuery",
                (),
                {
                    "edit_message_text": update.message.reply_text,
                    "message": update.message,
                    "from_user": update.effective_user,
                },
            )()

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º registration_handler –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await self.callback_handler.registration_handler.handle_register_callback(mock_query, language)

        except Exception as e:
            logger.error(f"Register message handler error: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

    async def _handle_help_message(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–º–æ—â–∏"""
        try:
            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if not await self.command_handler._authenticate_user(update):
                await update.message.reply_text("–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
                return

            language = await self.command_handler._get_user_language(update)

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º command_handler –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await self.command_handler.help_command(update, context)

        except Exception as e:
            logger.error(f"Help message handler error: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("Starting Alex Orator Bot...")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ backend
        try:
            await self.api_client.check_connection()
            logger.info("Backend connection successful")
        except Exception as e:
            logger.error(f"Backend connection failed: {e}")
            raise

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –±–æ—Ç–∞
        try:
            await self.content_manager.load_content()
            logger.info("Bot content loaded successfully")
        except Exception as e:
            logger.error(f"Failed to load bot content: {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        await self.application.initialize()
        await self.application.start()
        await self.application.updater.start_polling(allowed_updates=Update.ALL_TYPES)

        # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
        try:
            while True:
                await asyncio.sleep(1)
        except asyncio.CancelledError:
            pass

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        logger.info("Stopping Alex Orator Bot...")
        await self.application.updater.stop()
        await self.application.stop()
        await self.application.shutdown()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = AlexOratorBot()
    started = False

    try:
        await bot.start()
        started = True
    except KeyboardInterrupt:
        logger.info("Received interrupt signal")
    except Exception as e:
        logger.error(f"Bot error: {e}")
    finally:
        if started:
            await bot.stop()


if __name__ == "__main__":
    asyncio.run(main())
