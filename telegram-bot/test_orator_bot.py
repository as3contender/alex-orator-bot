#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è Alex Orator Bot
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±–æ—Ç–∞ –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ Telegram API
"""

import asyncio
import sys
import os
from unittest.mock import Mock, AsyncMock

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from orator_translations import get_text, get_button_text, TRANSLATIONS
from orator_api_client import OratorAPIClient


class MockOratorAPIClient:
    """–ú–æ–∫ API –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""

    def __init__(self):
        self.auth_token = "test_token"

    async def check_connection(self):
        return True

    async def authenticate_telegram_user(self, telegram_id, username=None, first_name=None, last_name=None):
        return "test_token"

    async def get_user_settings(self):
        return {"language": "ru"}

    async def get_current_registration(self):
        return None

    async def get_week_info(self):
        return {"week_start_date": "2024-01-15", "week_end_date": "2024-01-21", "week_number": 3, "year": 2024}

    async def get_topic_tree(self):
        return {
            "categories": [
                {"id": 1, "name": "–ü–æ–¥–∞—á–∞ - –¢–µ–º—ã —Ä–µ—á–∏ —É—Ä–æ–≤–µ–Ω—å 1"},
                {"id": 2, "name": "–ü–æ–¥–∞—á–∞ - –¢–µ–º—ã —Ä–µ—á–∏ —É—Ä–æ–≤–µ–Ω—å 2"},
                {"id": 3, "name": "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ - –õ–æ–≥–∏–∫–∞ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è"},
                {"id": 4, "name": "–ê—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏—è - –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞"},
                {"id": 5, "name": "–ü–æ–¥–∞—á–∞ - –ñ–µ—Å—Ç—ã –∏ –º–∏–º–∏–∫–∞"},
                {"id": 6, "name": "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ - –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∏ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ"},
            ]
        }

    async def get_user_stats(self):
        return {
            "total_sessions": 15,
            "feedback_count": 12,
            "total_registrations": 8,
            "total_pairs": 20,
            "confirmed_pairs": 18,
        }

    async def get_user_profile(self):
        return {
            "first_name": "–¢–µ—Å—Ç–æ–≤—ã–π",
            "email": "test@example.com",
            "gender": "male",
            "created_at": "2024-01-01T00:00:00Z",
        }

    async def get_user_pairs(self):
        return [
            {"partner_name": "–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞", "status": "confirmed", "created_at": "2024-01-15T10:00:00Z"},
            {"partner_name": "–ò–≤–∞–Ω –°–∏–¥–æ—Ä–æ–≤", "status": "pending", "created_at": "2024-01-16T14:00:00Z"},
        ]

    async def find_candidates(self, match_request):
        return {
            "candidates": [
                {"user_id": "uuid1", "first_name": "–ú–∞—Ä–∏—è", "match_score": 0.85},
                {"user_id": "uuid2", "first_name": "–ê–ª–µ–∫—Å–µ–π", "match_score": 0.72},
            ]
        }


async def test_translations():
    """–¢–µ—Å—Ç –ø–µ—Ä–µ–≤–æ–¥–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä—É—Å—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã
    assert get_text("welcome_message", "ru") != "[welcome_message]"
    assert get_text("help_message", "ru") != "[help_message]"
    assert get_button_text("register", "ru") == "üìÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã
    assert get_text("welcome_message", "en") != "[welcome_message]"
    assert get_text("help_message", "en") != "[help_message]"
    assert get_button_text("register", "en") == "üìÖ Register"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º fallback –Ω–∞ —Ä—É—Å—Å–∫–∏–π
    assert get_text("welcome_message", "unknown") != "[welcome_message]"

    print("‚úÖ –ü–µ—Ä–µ–≤–æ–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


async def test_api_client():
    """–¢–µ—Å—Ç API –∫–ª–∏–µ–Ω—Ç–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∫–ª–∏–µ–Ω—Ç–∞...")

    mock_client = MockOratorAPIClient()

    # –¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    token = await mock_client.authenticate_telegram_user("12345", "test_user")
    assert token == "test_token"

    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    settings = await mock_client.get_user_settings()
    assert settings["language"] == "ru"

    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–µ–¥–µ–ª–µ
    week_info = await mock_client.get_week_info()
    assert "week_start_date" in week_info
    assert "week_end_date" in week_info

    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞ —Ç–µ–º
    topic_tree = await mock_client.get_topic_tree()
    assert "categories" in topic_tree
    assert len(topic_tree["categories"]) > 0

    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats = await mock_client.get_user_stats()
    assert "total_sessions" in stats
    assert "feedback_count" in stats

    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    profile = await mock_client.get_user_profile()
    assert "first_name" in profile
    assert "email" in profile

    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä
    pairs = await mock_client.get_user_pairs()
    assert len(pairs) > 0
    assert "partner_name" in pairs[0]

    # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    candidates = await mock_client.find_candidates({"week_start_date": "2024-01-15"})
    assert "candidates" in candidates
    assert len(candidates["candidates"]) > 0

    print("‚úÖ API –∫–ª–∏–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


async def test_translation_coverage():
    """–¢–µ—Å—Ç –ø–æ–∫—Ä—ã—Ç–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤"""
    print("üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫–ª—é—á–∏ –µ—Å—Ç—å –≤ –æ–±–æ–∏—Ö —è–∑—ã–∫–∞—Ö
    ru_keys = set(TRANSLATIONS["ru"].keys())
    en_keys = set(TRANSLATIONS["en"].keys())

    missing_in_en = ru_keys - en_keys
    missing_in_ru = en_keys - ru_keys

    if missing_in_en:
        print(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º: {missing_in_en}")

    if missing_in_ru:
        print(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Ä—É—Å—Å–∫–æ–º: {missing_in_ru}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–ª—é—á–∏
    essential_keys = [
        "welcome_message",
        "help_message",
        "registration_welcome",
        "topics_welcome",
        "find_candidates_welcome",
        "pairs_welcome",
        "feedback_welcome",
        "profile_welcome",
        "stats_welcome",
    ]

    for key in essential_keys:
        assert key in ru_keys, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á {key} –≤ —Ä—É—Å—Å–∫–æ–º"
        assert key in en_keys, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á {key} –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º"

    print("‚úÖ –ü–æ–∫—Ä—ã—Ç–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ")


async def test_button_texts():
    """–¢–µ—Å—Ç —Ç–µ–∫—Å—Ç–æ–≤ –∫–Ω–æ–ø–æ–∫"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤ –∫–Ω–æ–ø–æ–∫...")

    button_keys = ["register", "topics", "find", "pairs", "feedback", "profile", "stats", "help", "cancel"]

    for key in button_keys:
        ru_text = get_button_text(key, "ru")
        en_text = get_button_text(key, "en")

        assert ru_text != f"[button_{key}]", f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ {key} –≤ —Ä—É—Å—Å–∫–æ–º"
        assert en_text != f"[button_{key}]", f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ {key} –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ –ø—É—Å—Ç–æ–π
        assert len(ru_text) > 0, f"–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ {key} –≤ —Ä—É—Å—Å–∫–æ–º"
        assert len(en_text) > 0, f"–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ {key} –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º"

    print("‚úÖ –¢–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ")


async def test_time_selections():
    """–¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏...")

    time_keys = ["time_morning", "time_afternoon", "time_evening"]

    for key in time_keys:
        ru_text = get_text(key, "ru")
        en_text = get_text(key, "en")

        assert ru_text != f"[{key}]", f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ {key} –≤ —Ä—É—Å—Å–∫–æ–º"
        assert en_text != f"[{key}]", f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ {key} –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Ä–µ–º—è
        assert ":" in ru_text or "00" in ru_text, f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ {key} –≤ —Ä—É—Å—Å–∫–æ–º"
        assert ":" in en_text or "00" in en_text, f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ {key} –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º"

    print("‚úÖ –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Alex Orator Bot")
    print("=" * 50)

    try:
        await test_translations()
        await test_api_client()
        await test_translation_coverage()
        await test_button_texts()
        await test_time_selections()

        print("=" * 50)
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ Alex Orator Bot –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())
