from typing import List, Dict, Any
from config import MAX_MESSAGE_LENGTH, MAX_RESULTS_DISPLAY


def format_tables_list(tables: List[Any], language: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü"""
    if language == "ru":
        header = "üìä <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:</b>\n\n"
        no_tables = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü"
    else:
        header = "üìä <b>Available tables:</b>\n\n"
        no_tables = "No tables available"

    if not tables:
        return no_tables

    result = header
    for i, table in enumerate(tables, 1):
        row_count = f" ({table.row_count} —Å—Ç—Ä–æ–∫)" if table.row_count else ""
        description = f" - {table.description}" if table.description else ""
        result += f"{i}. <code>{table.name}</code>{row_count}{description}\n"

    return result


def format_sample_data(sample_data: Any, language: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
    if language == "ru":
        header = f"üìã <b>–ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã {sample_data.table}:</b>\n\n"
        no_data = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
    else:
        header = f"üìã <b>Sample data from table {sample_data.table}:</b>\n\n"
        no_data = "No data to display"

    if not sample_data.data:
        return no_data

    result = header

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
    if sample_data.data:
        columns = list(sample_data.data[0].keys())
        result += "| " + " | ".join(columns) + " |\n"
        result += "|" + "|".join(["---"] * len(columns)) + "|\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫)
        for row in sample_data.data[:MAX_RESULTS_DISPLAY]:
            values = [str(row.get(col, "")) for col in columns]
            result += "| " + " | ".join(values) + " |\n"

        if len(sample_data.data) > MAX_RESULTS_DISPLAY:
            result += f"\n<i>–ü–æ–∫–∞–∑–∞–Ω–æ {MAX_RESULTS_DISPLAY} –∏–∑ {len(sample_data.data)} —Å—Ç—Ä–æ–∫</i>"

    return result


def format_query_results(
    result: Dict[str, Any], language: str, show_explanations: bool, show_sql: bool, max_results: int
) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–∞"""
    if language == "ru":
        header = "üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–∞:</b>\n\n"
        no_data = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
        explanation_header = "üí° <b>–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:</b>\n"
        sql_header = "üîç <b>SQL –∑–∞–ø—Ä–æ—Å:</b>\n"
        row_count = "—Å—Ç—Ä–æ–∫"
    else:
        header = "üìä <b>Query results:</b>\n\n"
        no_data = "No data to display"
        explanation_header = "üí° <b>Explanation:</b>\n"
        sql_header = "üîç <b>SQL query:</b>\n"
        row_count = "rows"

    result_text = header

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
    if show_explanations and result.get("explanation"):
        result_text += explanation_header + result["explanation"] + "\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º SQL –∑–∞–ø—Ä–æ—Å
    if show_sql and result.get("sql"):
        result_text += sql_header + f"<code>{result['sql']}</code>\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    data = result.get("data", [])
    if not data:
        result_text += no_data
        return result_text

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
    columns = list(data[0].keys())
    result_text += "| " + " | ".join(columns) + " |\n"
    result_text += "|" + "|".join(["---"] * len(columns)) + "|\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫)
    display_count = min(len(data), max_results, MAX_RESULTS_DISPLAY)
    for row in data[:display_count]:
        values = [str(row.get(col, "")) for col in columns]
        result_text += "| " + " | ".join(values) + " |\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å—Ç—Ä–æ–∫
    if len(data) > display_count:
        result_text += f"\n<i>–ü–æ–∫–∞–∑–∞–Ω–æ {display_count} –∏–∑ {len(data)} {row_count}</i>"
    else:
        result_text += f"\n<i>–í—Å–µ–≥–æ {len(data)} {row_count}</i>"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
    if len(result_text) > MAX_MESSAGE_LENGTH:
        result_text = (
            result_text[: MAX_MESSAGE_LENGTH - 100] + "...\n\n<i>–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram</i>"
        )

    return result_text


def format_settings(settings: Any, language: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if language == "ru":
        header = "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n"
        language_text = "–Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"
        explanations_text = "–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è"
        sql_text = "–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å SQL –∑–∞–ø—Ä–æ—Å—ã"
        max_results_text = "–ú–∞–∫—Å–∏–º—É–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
        auto_format_text = "–ê–≤—Ç–æ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
        enabled = "–í–∫–ª—é—á–µ–Ω–æ"
        disabled = "–û—Ç–∫–ª—é—á–µ–Ω–æ"
    else:
        header = "‚öôÔ∏è <b>User settings:</b>\n\n"
        language_text = "Interface language"
        explanations_text = "Show explanations"
        sql_text = "Show SQL queries"
        max_results_text = "Max results"
        auto_format_text = "Auto formatting"
        enabled = "Enabled"
        disabled = "Disabled"

    result = header
    result += f"üåê <b>{language_text}:</b> {settings.language.upper()}\n"
    result += f"üí° <b>{explanations_text}:</b> {enabled if settings.show_explanations else disabled}\n"
    result += f"üîç <b>{sql_text}:</b> {enabled if settings.show_sql else disabled}\n"
    result += f"üìä <b>{max_results_text}:</b> {settings.max_results}\n"
    result += f"‚ú® <b>{auto_format_text}:</b> {enabled if settings.auto_format else disabled}\n"

    return result
