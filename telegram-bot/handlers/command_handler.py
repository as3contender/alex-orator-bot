"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from loguru import logger

from .base_handler import OratorBaseHandler
from .feedback_handler import FeedbackHandler
from orator_translations import get_text, get_button_text
from typing import Dict, List, Any


class CommandHandler(OratorBaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""

    def __init__(self, api_client, content_manager=None):
        super().__init__(api_client, content_manager)
        self.feedback_handler = FeedbackHandler(api_client, content_manager)

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if not await self._authenticate_user(update):
                await update.message.reply_text(get_text("error_authentication", "ru"))
                return

            user = update.effective_user
            language = await self._get_user_language(update)

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            if self.content_manager and self.content_manager.is_content_loaded():
                # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—É–∂–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–æ)
                welcome_text = self.content_manager.get_content("welcome_message", language)
                welcome_text += (
                    "\n\n –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é –ø–æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –º–æ–∂–Ω–æ –≤ –≥—Ä—É–ø–ø–µ https://t.me/+QD8-o4q4pX1mODVi"
                )

                # –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ (—É–∂–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–æ)
                training_text = self.content_manager.get_content(
                    "—Ö–æ—á–µ—à—å_—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è_–Ω–∞_—ç—Ç–æ–π_–Ω–µ–¥–µ–ª–µ_–≤—Ç–æ—Ä–æ–µ_—Å–æ–æ–±—â–µ–Ω–∏–µ", language
                )
                logger.info(f"Training text (first 100 chars): {training_text[:100]}")

            else:
                # Fallback –∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º —Ç–µ–∫—Å—Ç–∞–º
                welcome_text = get_text("welcome_message", language).format(
                    name=user.first_name or user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                )

                training_text = get_text("—Ö–æ—á–µ—à—å_—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è_–Ω–∞_—ç—Ç–æ–π_–Ω–µ–¥–µ–ª–µ_–≤—Ç–æ—Ä–æ–µ_—Å–æ–æ–±—â–µ–Ω–∏–µ", language)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await update.message.reply_text(welcome_text)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            from telegram import ReplyKeyboardMarkup, KeyboardButton

            menu_keyboard = ReplyKeyboardMarkup(
                [
                    [KeyboardButton("üöÄ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"), KeyboardButton("üë• –ú–æ–∏ –ø–∞—Ä—ã")],
                    [KeyboardButton("üîç –ü–æ–∏—Å–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤"), KeyboardButton("üóí –ú–æ–∏ –∑–∞–¥–∞—á–∏")],
                    [KeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"), KeyboardButton("‚ùì –ü–æ–º–æ—â—å")],
                ],
                resize_keyboard=True,
                one_time_keyboard=False,
            )
            await update.message.reply_text(training_text, reply_markup=menu_keyboard)

            logger.info(f"User {user.id} started Alex Orator Bot")

        except Exception as e:
            logger.error(f"Start command error: {e}")
            await update.message.reply_text(get_text("error_unknown", "ru"))

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        try:
            if not await self._authenticate_user(update):
                await update.message.reply_text(get_text("error_authentication", "ru"))
                return

            language = await self._get_user_language(update)

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            if self.content_manager and self.content_manager.is_content_loaded():
                help_text = self.content_manager.get_content("help_message", language)
            else:
                # Fallback –∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–º—É —Ç–µ–∫—Å—Ç—É
                help_text = get_text("help_message", language)

            await update.message.reply_text(help_text)

        except Exception as e:
            logger.error(f"Help command error: {e}")
            await update.message.reply_text(get_text("error_unknown", "ru"))

    async def menu_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu"""
        try:
            if not await self._authenticate_user(update):
                await update.message.reply_text(get_text("error_authentication", "ru"))
                return

            user = update.effective_user
            language = await self._get_user_language(update)

            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            if self.content_manager and self.content_manager.is_content_loaded():
                training_text = self.content_manager.get_content(
                    "—Ö–æ—á–µ—à—å_—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è_–Ω–∞_—ç—Ç–æ–π_–Ω–µ–¥–µ–ª–µ_–≤—Ç–æ—Ä–æ–µ_—Å–æ–æ–±—â–µ–Ω–∏–µ", language
                )
            else:
                # Fallback –∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–º—É —Ç–µ–∫—Å—Ç—É
                training_text = get_text("—Ö–æ—á–µ—à—å_—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è_–Ω–∞_—ç—Ç–æ–π_–Ω–µ–¥–µ–ª–µ_–≤—Ç–æ—Ä–æ–µ_—Å–æ–æ–±—â–µ–Ω–∏–µ", language)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –º–µ–Ω—é
            from telegram import ReplyKeyboardMarkup, KeyboardButton

            menu_keyboard = ReplyKeyboardMarkup(
                [
                    [KeyboardButton("üöÄ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"), KeyboardButton("üë• –ú–æ–∏ –ø–∞—Ä—ã")],
                    [KeyboardButton("üîç –ü–æ–∏—Å–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤"), KeyboardButton("üóí –ú–æ–∏ –∑–∞–¥–∞—á–∏")],
                    [KeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"), KeyboardButton("‚ùì –ü–æ–º–æ—â—å")],
                ],
                resize_keyboard=True,
                one_time_keyboard=False,
            )
            await update.message.reply_text(training_text, reply_markup=menu_keyboard)

            logger.info(f"User {user.id} opened menu via /menu command")

        except Exception as e:
            logger.error(f"Menu command error: {e}")
            await update.message.reply_text(get_text("error_unknown", "ru"))

    async def find_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /find - –ø–æ–∏—Å–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤"""
        try:
            if not await self._authenticate_user(update):
                await update.message.reply_text(get_text("error_authentication", "ru"))
                return

            language = await self._get_user_language(update)
            await self._handle_find_candidates_common(language, update.message.reply_text)

        except Exception as e:
            logger.error(f"Find command error: {e}")
            await update.message.reply_text(get_text("error_unknown", "ru"))

    async def pairs_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /pairs - –º–æ–∏ –ø–∞—Ä—ã"""
        try:
            if not await self._authenticate_user(update):
                await update.message.reply_text(get_text("error_authentication", "ru"))
                return

            language = await self._get_user_language(update)
            await self._handle_pairs_common(language, update.message.reply_text)

        except Exception as e:
            logger.error(f"Pairs command error: {e}")
            await update.message.reply_text(get_text("error_unknown", "ru"))

    async def mytasks_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /mytasks - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç–µ–º–µ"""
        try:
            if not await self._authenticate_user(update):
                await update.message.reply_text(get_text("error_authentication", "ru"))
                return

            user = update.effective_user
            language = await self._get_user_language(update)

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é –ª–æ–≥–∏–∫—É –∏–∑ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
            await self._handle_mytasks_common(language, update.message.reply_text)

        except Exception as e:
            logger.error(f"MyTasks command error: {e}")
            await update.message.reply_text(get_text("error_unknown", "ru"))

    async def handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            if not await self._authenticate_user(update):
                await update.message.reply_text(get_text("error_authentication", "ru"))
                return

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –æ–±—ã—á–Ω–æ
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:\n"
                "‚Ä¢ /menu - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                "‚Ä¢ /help - —Å–ø—Ä–∞–≤–∫–∞\n"
                "‚Ä¢ /start - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
                "‚Ä¢ /register - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é\n"
                "‚Ä¢ /find - –ø–æ–∏—Å–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤\n"
                "‚Ä¢ /pairs - –º–æ–∏ –ø–∞—Ä—ã\n"
                "‚Ä¢ /mytasks - –≤–∞—à–∏ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é"
            )

        except Exception as e:
            logger.error(f"Text message handler error: {e}")
            await update.message.reply_text(get_text("error_unknown", "ru"))
