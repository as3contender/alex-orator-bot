"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–º–∞–º–∏
"""

from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from loguru import logger

from .base_handler import OratorBaseHandler
from orator_translations import get_text, get_button_text


class TopicsHandler(OratorBaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–º–∞–º–∏"""

    async def handle_topics_callback(self, query, language: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ—Ä–Ω–µ–≤—ã–µ —Ç–µ–º—ã"""
        logger.info("Topics callback triggered")
        try:
            await self.show_topics_menu(query, language)
        except Exception as e:
            logger.error(f"Error in topics callback: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def show_topics_menu_after_time_selection(self, query, language: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–º—ã –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ (–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)"""
        logger.info("Showing topics after time selection")
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ä–µ–≤–æ —Ç–µ–º
            topic_tree = await self.api_client.get_topic_tree()
            # logger.info(f"Topic tree received after time selection: {topic_tree}")
        except Exception as e:
            logger.error(f"Error getting topic tree after time selection: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ—Ä–Ω–µ–≤—ã–µ —Ç–µ–º—ã (Level 1)
        topics_to_show = topic_tree.get("topics", [])

        message_text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:"

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–º (—Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º reg_ –¥–ª—è –æ—Ç–ª–∏—á–∏—è –æ—Ç –æ–±—ã—á–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Ç–µ–º)
        keyboard = []
        for topic in topics_to_show:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            has_children = len(topic.get("children", [])) > 0
            if has_children:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö (Level 1 -> Level 2)
                keyboard.append(
                    [InlineKeyboardButton(f"üìÅ {topic['name']}", callback_data=f"reg_topic_group_{topic['id']}")]
                )
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —ç—Ç–æ –∫–æ–Ω–µ—á–Ω–∞—è —Ç–µ–º–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (Level 1 -> —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è)
                keyboard.append(
                    [InlineKeyboardButton(f"‚úÖ {topic['name']}", callback_data=f"reg_topic_select_{topic['id']}")]
                )

        keyboard.append([InlineKeyboardButton(get_button_text("cancel", language), callback_data="register")])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(message_text, reply_markup=reply_markup)

    async def show_registration_topics_submenu(self, query, language: str, parent_id: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–º–µ–Ω—é —Ç–µ–º –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (Level 2)"""
        logger.info(f"TOPICS: Showing registration submenu for parent: {parent_id}")
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ä–µ–≤–æ —Ç–µ–º
            topic_tree = await self.api_client.get_topic_tree()
        except Exception as e:
            logger.error(f"TOPICS: Error getting topic tree for registration submenu: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        # –ù–∞—Ö–æ–¥–∏–º –¥–æ—á–µ—Ä–Ω–∏–µ —Ç–µ–º—ã –¥–ª—è parent_id
        topics_to_show = []
        parent_name = ""
        for topic in topic_tree.get("topics", []):
            if topic["id"] == parent_id:
                topics_to_show = topic.get("children", [])
                parent_name = topic["name"]
                break

        if not topics_to_show:
            logger.warning(f"TOPICS: No sub-topics found for parent: {parent_id}")
            await query.edit_message_text("‚ùå –ü–æ–¥—Ç–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        message_text = f"–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –¥–ª—è —Ç–µ–º—ã '{parent_name}':"

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–º (Level 2 -> —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è)
        keyboard = []
        for topic in topics_to_show:
            # –ù–∞ —ç—Ç–æ–º —É—Ä–æ–≤–Ω–µ –≤—Å–µ —Ç–µ–º—ã –∫–æ–Ω–µ—á–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            keyboard.append(
                [InlineKeyboardButton(f"‚úÖ {topic['name']}", callback_data=f"reg_topic_select_{topic['id']}")]
            )

        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∫ –∫–æ—Ä–Ω–µ–≤—ã–º —Ç–µ–º–∞–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="time_back_to_topics")])
        keyboard.append([InlineKeyboardButton(get_button_text("cancel", language), callback_data="register")])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(message_text, reply_markup=reply_markup)

    async def handle_registration_topic_selection(self, query, callback_data: str, language: str, registration_handler):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        topic_id = callback_data.replace("reg_topic_select_", "")
        logger.info(f"TOPICS: Registration topic selection started for topic_id: {topic_id}")

        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ä–µ–≤–æ —Ç–µ–º –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–º–µ
        try:
            topic_tree = await self.api_client.get_topic_tree()
            topic_info = self._find_topic_by_id(topic_tree, topic_id)
            logger.info(f"TOPICS: Topic found - ID: {topic_id}, Info: {topic_info}")
        except Exception as e:
            logger.error(f"TOPICS: Error getting topic tree: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ–º")
            return False

        if topic_info:
            topic_name = topic_info["name"]
            topic_level = topic_info.get("level", 1)

            logger.info(f"TOPICS: Calling registration handler to create registration")
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–æ–π (topic_id —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —É—Ä–æ–≤–µ–Ω—å)
            success = await registration_handler.create_registration_with_topic(topic_id)
            logger.info(f"TOPICS: Registration creation result: {success}")

            if success:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º level —Ç–µ–º—ã
                if topic_level == 2:
                    # –î–ª—è —Ç–µ–º level=2 –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è
                    message_text = f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                    message_text += f"üìù –¢–µ–º–∞: {topic_name}\n\n"
                    message_text += f"üîç –ò—â–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –ø–∞—Ä—ã..."
                    await query.edit_message_text(message_text)

                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è
                    await self._show_all_exercises_for_topic(query, topic_id, topic_name, language)
                    return True
                else:
                    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–¥–Ω–æ –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –æ–±—ã—á–Ω–æ
                    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º—ã
                    exercise_text = await self._get_exercise_by_topic(topic_id, language)

                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞–Ω–∏–µ–º
                    message_text = f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                    message_text += f"üìù –¢–µ–º–∞: {topic_name}\n\n"
                    message_text += f"<b>–ó–∞–¥–∞–Ω–∏–µ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:</b>\n\n"
                    message_text += f"{exercise_text}\n\n"
                    message_text += f"üîç –ò—â–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –ø–∞—Ä—ã..."

                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞–Ω–∏–µ–º
                    await query.edit_message_text(message_text)
                    return True  # –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
                return False
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: —Ç–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False

    async def show_topics_menu(self, query, language: str, parent_id: str = None):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ç–µ–º (–∫–æ—Ä–Ω–µ–≤—ã–µ –∏–ª–∏ –¥–æ—á–µ—Ä–Ω–∏–µ)"""
        logger.info("Getting topic tree from API")
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ä–µ–≤–æ —Ç–µ–º
            topic_tree = await self.api_client.get_topic_tree()
            # logger.info(f"Topic tree received: {topic_tree}")
        except Exception as e:
            logger.error(f"Error getting topic tree: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ —Ç–µ–º—ã –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
        if parent_id is None:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ—Ä–Ω–µ–≤—ã–µ —Ç–µ–º—ã
            topics_to_show = topic_tree.get("topics", [])
            message_text = get_text("topics_welcome", language)
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —Ç–µ–º—ã
            topics_to_show = []
            for topic in topic_tree.get("topics", []):
                if topic["id"] == parent_id:
                    topics_to_show = topic.get("children", [])
                    break
            message_text = f"–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –¥–ª—è —Ç–µ–º—ã:"

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–º
        keyboard = []
        for topic in topics_to_show:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            has_children = len(topic.get("children", [])) > 0
            if has_children:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
                keyboard.append(
                    [InlineKeyboardButton(f"üìÅ {topic['name']}", callback_data=f"topic_group_{topic['id']}")]
                )
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —ç—Ç–æ –∫–æ–Ω–µ—á–Ω–∞—è —Ç–µ–º–∞
                keyboard.append(
                    [InlineKeyboardButton(f"‚úÖ {topic['name']}", callback_data=f"topic_select_{topic['id']}")]
                )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –µ—Å–ª–∏ –º—ã –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö —Ç–µ–º–∞—Ö
        if parent_id is not None:
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="topics")])

        keyboard.append([InlineKeyboardButton(get_button_text("cancel", language), callback_data="cancel")])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(message_text, reply_markup=reply_markup)

    async def handle_topic_selection(self, query, callback_data: str, language: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º—ã"""
        topic_id = callback_data.replace("topic_select_", "")

        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ä–µ–≤–æ —Ç–µ–º –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–º–µ
        topic_tree = await self.api_client.get_topic_tree()
        topic_info = self._find_topic_by_id(topic_tree, topic_id)

        if topic_info:
            topic_name = topic_info["name"]
            topic_level = topic_info.get("level", 1)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º level —Ç–µ–º—ã
            if topic_level == 2:
                # –î–ª—è —Ç–µ–º level=2 –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è
                await self._show_all_exercises_for_topic(query, topic_id, topic_name, language)
                return True
            else:
                # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–¥–Ω–æ –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –æ–±—ã—á–Ω–æ
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º—ã
                exercise_text = await self._get_exercise_by_topic(topic_id, language)

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞–Ω–∏–µ–º
                message_text = f"‚úÖ –¢–µ–º–∞ –≤—ã–±—Ä–∞–Ω–∞: {topic_name}\n\n"
                message_text += f"üìù <b>–ó–∞–¥–∞–Ω–∏–µ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:</b>\n\n"
                message_text += f"{exercise_text}\n\n"
                message_text += f"üîç –ò—â–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –ø–∞—Ä—ã..."

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞–Ω–∏–µ–º
                await query.edit_message_text(message_text)
                return True  # –£—Å–ø–µ—à–Ω—ã–π –≤—ã–±–æ—Ä —Ç–µ–º—ã
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: —Ç–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False

    async def start_candidate_search(self, query, language: str):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤"""
        logger.info("SEARCH: Starting candidate search")
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            registration = await self.api_client.get_current_registration()
            logger.info(f"SEARCH: Current registration check result: {registration}")

            if not registration:
                logger.warning("SEARCH: No registration found - user needs to register first")
                await query.edit_message_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –Ω–µ–¥–µ–ª—é")
                return

            # –ò—â–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
            match_request = {"week_start_date": registration["week_start_date"], "limit": 5}
            candidates_response = await self.api_client.find_candidates(match_request)
            candidates = candidates_response.get("candidates", [])

            if not candidates:
                keyboard = [
                    [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="find")],
                    [InlineKeyboardButton(get_button_text("back", language), callback_data="main_menu")],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(
                    "‚ùå –ö–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞.", reply_markup=reply_markup
                )
                return

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
            keyboard = []
            for candidate in candidates[:5]:
                name = candidate.get("name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
                score = candidate.get("match_score", 0)
                preferred_time = candidate.get("preferred_time_msk", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
                selected_topics = candidate.get("selected_topics", [])

                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Ç–µ–º—É –∏–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"
                topic_display = selected_topics[0] if selected_topics else "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
                button_text = f"{name} [{topic_display}] {preferred_time} (—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {score:.1%})"

                keyboard.append([InlineKeyboardButton(button_text, callback_data=f"candidate_{candidate['user_id']}")])

            keyboard.append([InlineKeyboardButton(get_button_text("back", language), callback_data="main_menu")])

            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(candidates)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –ø–∞—Ä—ã:\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:", reply_markup=reply_markup
            )

        except Exception as e:
            logger.error(f"Error in candidate search: {e}")
            keyboard = [
                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="find")],
                [InlineKeyboardButton(get_button_text("back", language), callback_data="main_menu")],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=reply_markup
            )

    def _find_topic_by_id(self, topic_tree: dict, topic_id: str) -> dict:
        """–ù–∞–π—Ç–∏ –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–º–µ –ø–æ ID –≤ –¥–µ—Ä–µ–≤–µ —Ç–µ–º"""

        def search_in_topics(topics):
            for topic in topics:
                if topic["id"] == topic_id:
                    return topic
                # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ–º –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö —Ç–µ–º–∞—Ö
                if "children" in topic:
                    result = search_in_topics(topic["children"])
                    if result:
                        return result
            return None

        return search_in_topics(topic_tree.get("topics", []))

    async def _show_all_exercises_for_topic(self, query, topic_id: str, topic_name: str, language: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —Ç–µ–º—ã level=2"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —Ç–µ–º—ã
            exercises_response = await self.api_client.get_exercises_by_topic(topic_id)
            exercises = exercises_response.get("exercises", [])

            if not exercises:
                await query.edit_message_text(f"‚ùå –î–ª—è —Ç–µ–º—ã '{topic_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π.")
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            header_text = f"‚úÖ –¢–µ–º–∞ –≤—ã–±—Ä–∞–Ω–∞: {topic_name}\n\n"
            header_text += f"üìö –í—Å–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ ({len(exercises)} —à—Ç.):\n\n"
            await query.edit_message_text(header_text)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            for i, exercise in enumerate(exercises, 1):
                exercise_text = exercise.get("content_text", "–¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
                formatted_text = f"üìù <b>–ó–∞–¥–∞–Ω–∏–µ {i}/{len(exercises)}:</b>\n\n{exercise_text}"

                # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (Telegram –ª–∏–º–∏—Ç ~4096 —Å–∏–º–≤–æ–ª–æ–≤)
                if len(formatted_text) > 4000:
                    parts = [formatted_text[j : j + 4000] for j in range(0, len(formatted_text), 4000)]
                    for part in parts:
                        await query.message.reply_text(part)
                else:
                    await query.message.reply_text(formatted_text)

            logger.info(
                f"User {query.from_user.id} viewed all exercises for topic {topic_id}, found {len(exercises)} exercises"
            )

        except Exception as e:
            logger.error(f"Error getting exercises for topic {topic_id}: {e}")
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è —Ç–µ–º—ã '{topic_name}'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
