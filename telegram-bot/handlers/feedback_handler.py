"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
"""

from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from loguru import logger

from .base_handler import OratorBaseHandler
from orator_translations import get_text, get_button_text


class FeedbackHandler(OratorBaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""

    # –°—Ç–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –∫–ª–∞—Å—Å–∞
    _user_feedback_states = {}

    async def handle_feedback_callback(self, query, language: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        keyboard = [
            [
                InlineKeyboardButton("üì• –ü–æ–ª—É—á–µ–Ω–Ω–∞—è", callback_data="feedback_received"),
                InlineKeyboardButton("üì§ –î–∞–Ω–Ω–∞—è", callback_data="feedback_given"),
            ],
            [
                InlineKeyboardButton(get_button_text("cancel", language), callback_data="cancel"),
            ],
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(get_text("feedback_welcome", language), reply_markup=reply_markup)

    async def handle_feedback_type_callback(self, query, callback_data: str, language: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        feedback_type = callback_data.replace("feedback_", "")

        if feedback_type == "received":
            feedback_list = await self.api_client.get_received_feedback()
            if not feedback_list:
                await query.edit_message_text(get_text("feedback_empty", language))
                return

            feedback_text = get_text("feedback_received", language) + "\n\n"
            for i, feedback in enumerate(feedback_list[:3], 1):
                feedback_text += f"{i}. {feedback.get('feedback_text', '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞')}\n"

        elif feedback_type == "given":
            feedback_list = await self.api_client.get_given_feedback()
            if not feedback_list:
                await query.edit_message_text(get_text("feedback_empty", language))
                return

            feedback_text = get_text("feedback_given", language) + "\n\n"
            for i, feedback in enumerate(feedback_list[:3], 1):
                feedback_text += f"{i}. {feedback.get('feedback_text', '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞')}\n"
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
            await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏")
            return

        keyboard = [[InlineKeyboardButton(get_button_text("back", language), callback_data="feedback")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(feedback_text, reply_markup=reply_markup)

    async def handle_pair_feedback(self, query, callback_data: str, language: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ –ø–∞—Ä–µ - –∑–∞–ø—Ä–æ—Å –æ—Ü–µ–Ω–∫–∏"""
        logger.info(f"FeedbackHandler: handle_pair_feedback called with {callback_data}")
        pair_id = callback_data.replace("pair_feedback_", "")

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π pair_id)
        short_pair_id = pair_id[:8]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 8 —Å–∏–º–≤–æ–ª–æ–≤
        keyboard = [
            [
                InlineKeyboardButton("1 ‚≠ê", callback_data=f"r{short_pair_id}1"),
                InlineKeyboardButton("2 ‚≠ê‚≠ê", callback_data=f"r{short_pair_id}2"),
                InlineKeyboardButton("3 ‚≠ê‚≠ê‚≠ê", callback_data=f"r{short_pair_id}3"),
            ],
            [
                InlineKeyboardButton("4 ‚≠ê‚≠ê‚≠ê‚≠ê", callback_data=f"r{short_pair_id}4"),
                InlineKeyboardButton("5 ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê", callback_data=f"r{short_pair_id}5"),
            ],
            [
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_feedback"),
            ],
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üåü –û—Ü–µ–Ω–∏—Ç–µ –≤–∞—à—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º:\n\n"
            "1 - –û—á–µ–Ω—å –ø–ª–æ—Ö–æ\n"
            "2 - –ü–ª–æ—Ö–æ\n"
            "3 - –ù–æ—Ä–º–∞–ª—å–Ω–æ\n"
            "4 - –•–æ—Ä–æ—à–æ\n"
            "5 - –û—Ç–ª–∏—á–Ω–æ",
            reply_markup=reply_markup,
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º pair_id –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        user_id = query.from_user.id
        short_pair_id = pair_id[:8]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 8 —Å–∏–º–≤–æ–ª–æ–≤
        state_data = {"pair_id": pair_id, "short_pair_id": short_pair_id, "language": language}
        self._set_user_feedback_state(user_id, state_data)
        logger.info(
            f"FeedbackHandler: set feedback state for user {user_id}, pair_id={pair_id}, short_pair_id={short_pair_id}"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
        saved_state = self._get_user_feedback_state(user_id)
        logger.info(f"FeedbackHandler: saved state verification: {saved_state}")

    async def handle_rating_callback(self, query, callback_data: str, language: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ü–µ–Ω–∫–∏"""
        logger.info(f"FeedbackHandler: handle_rating_callback called with {callback_data}")

        # –ü–∞—Ä—Å–∏–º callback_data: r{short_pair_id}{rating}
        if not callback_data.startswith("r") or len(callback_data) != 10:
            logger.error(f"FeedbackHandler: invalid rating callback format: {callback_data}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö")
            return

        short_pair_id = callback_data[1:9]  # 8 —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ—Å–ª–µ 'r'
        rating = int(callback_data[9])  # –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª - —Ä–µ–π—Ç–∏–Ω–≥
        logger.info(f"FeedbackHandler: parsed short_pair_id={short_pair_id}, rating={rating}")

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π pair_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = query.from_user.id
        state = self._get_user_feedback_state(user_id)
        logger.info(f"FeedbackHandler: user {user_id} state in rating callback: {state}")
        if not state or state.get("short_pair_id") != short_pair_id:
            logger.error(f"FeedbackHandler: no matching state found for user {user_id}, short_pair_id={short_pair_id}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π pair_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = query.from_user.id
        state = self._get_user_feedback_state(user_id)
        logger.info(f"FeedbackHandler: user {user_id} state in rating callback: {state}")
        if not state or state.get("short_pair_id") != short_pair_id:
            logger.error(f"FeedbackHandler: no matching state found for user {user_id}, short_pair_id={short_pair_id}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        full_pair_id = state["pair_id"]
        logger.info(f"FeedbackHandler: using full pair_id={full_pair_id}")

        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
            feedback_data = {
                "pair_id": full_pair_id,
                "rating": int(rating),
                "feedback_text": f"–û—Ü–µ–Ω–∫–∞: {rating} –∑–≤–µ–∑–¥",
            }
            logger.info(f"FeedbackHandler: sending feedback data: {feedback_data}")
            result = await self.api_client.create_feedback(feedback_data)
            logger.info(f"FeedbackHandler: feedback saved successfully: {result}")

            await query.edit_message_text(f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!\n\n" f"–û—Ü–µ–Ω–∫–∞: {rating} ‚≠ê")

            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self._clear_user_feedback_state(user_id)
            logger.info(f"FeedbackHandler: feedback saved for user {user_id}, pair {full_pair_id}")

        except Exception as e:
            logger.error(f"Create feedback error: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏")

    async def handle_cancel_feedback(self, query, language: str):
        """–û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        user_id = query.from_user.id
        self._clear_user_feedback_state(user_id)

        await query.edit_message_text("‚ùå –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç–º–µ–Ω–µ–Ω–∞")
        logger.info(f"FeedbackHandler: feedback cancelled for user {user_id}")

    def _set_user_feedback_state(self, user_id: int, state: dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        self._user_feedback_states[user_id] = state
        logger.info(f"FeedbackHandler: _set_user_feedback_state called for user {user_id}, state: {state}")
        logger.info(f"FeedbackHandler: current states: {self._user_feedback_states}")

    def _get_user_feedback_state(self, user_id: int):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        state = self._user_feedback_states.get(user_id)
        logger.info(f"FeedbackHandler: _get_user_feedback_state called for user {user_id}, returned: {state}")
        return state

    def _clear_user_feedback_state(self, user_id: int):
        """–û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id in self._user_feedback_states:
            del self._user_feedback_states[user_id]

    async def handle_text_message(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ (–±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)"""
        return False
