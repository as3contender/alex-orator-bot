"""
–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup

from loguru import logger

from orator_api_client import OratorAPIClient
from orator_translations import get_text, get_button_text
from bot_content_manager import format_text_for_telegram


class OratorBaseHandler:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""

    def __init__(self, api_client: OratorAPIClient, content_manager=None):
        self.api_client = api_client
        self.content_manager = content_manager

    def _format_text_for_telegram(self, text: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram HTML —Ä–µ–∂–∏–º–µ"""
        return format_text_for_telegram(text)

    async def _authenticate_user(self, update: Update) -> bool:
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Telegram"""
        try:
            user = update.effective_user
            await self.api_client.authenticate_telegram_user(
                telegram_id=str(user.id), username=user.username, first_name=user.first_name, last_name=user.last_name
            )
            return True
        except Exception as e:
            logger.error(f"Authentication failed for user {user.id}: {e}")
            return False

    async def _get_user_language(self, update: Update) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            settings = await self.api_client.get_user_settings()
            return settings.get("language", "ru")
        except:
            return "ru"

    async def _get_bot_content(self, content_key: str, language: str = "ru") -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –±–æ—Ç–∞ –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        if self.content_manager and self.content_manager.is_content_loaded():
            # –ö–æ–Ω—Ç–µ–Ω—Ç —É–∂–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω –≤ content_manager
            return self.content_manager.get_content(content_key, language)

        # Fallback –∫ API –∑–∞–ø—Ä–æ—Å—É
        try:
            response = await self.api_client.get_bot_content(content_key)
            content = response.get("content_text", f"–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {content_key}")
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ fallback
            return self._format_text_for_telegram(content)
        except Exception as e:
            logger.error(f"Error getting bot content for key '{content_key}': {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback —Ç–µ–∫—Å—Ç
            return get_text(content_key, language)

    async def _get_exercise_by_topic(self, topic_id: str, language: str = "ru") -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –ø–æ —Ç–µ–º–µ –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        if self.content_manager and self.content_manager.is_content_loaded():
            # –ö–æ–Ω—Ç–µ–Ω—Ç —É–∂–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω –≤ content_manager
            return self.content_manager.get_exercise(topic_id, language)

        # Fallback –∫ API –∑–∞–ø—Ä–æ—Å—É
        try:
            response = await self.api_client.get_bot_content(f"exercise_{topic_id}")
            content = response.get("content_text", f"–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —Ç–µ–º—ã: {topic_id}")
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ fallback
            return self._format_text_for_telegram(content)
        except Exception as e:
            logger.error(f"Error getting exercise for topic '{topic_id}': {e}")
            return f"–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è —Ç–µ–º—ã '{topic_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

    def _find_topic_name(self, topic_tree: dict, topic_id: str) -> str:
        """–ù–∞–π—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã –ø–æ ID –≤ –¥–µ—Ä–µ–≤–µ —Ç–µ–º"""

        def search_in_topics(topics):
            for topic in topics:
                if topic["id"] == topic_id:
                    return topic["name"]
                # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ–º –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö —Ç–µ–º–∞—Ö
                if "children" in topic:
                    result = search_in_topics(topic["children"])
                    if result:
                        return result
            return None

        return search_in_topics(topic_tree.get("topics", []))

    async def _get_user_tasks(self, user_id: int = None, language: str = "ru"):
        """–û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –∫–æ–º–∞–Ω–¥—ã –∏ callback)"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            registration = await self.api_client.get_current_registration()

            if not registration:
                return None, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é. –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å."

            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ–º—ã
            selected_topics = registration.get("selected_topics", [])

            if not selected_topics:
                return None, "–£ –≤–∞—Å –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ–º –¥–ª—è —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏. –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."

            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Ç–µ–º—É
            topic_id = selected_topics[0]
            topic_tree = await self.api_client.get_topic_tree()
            topic_name = self._find_topic_name(topic_tree, topic_id)

            logger.info(f"Getting exercises for topic_id: {topic_id}")

            # –ü–æ–ª—É—á–∞–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ —Ç–µ–º–µ
            exercises_response = await self.api_client.get_exercises_by_topic(topic_id)

            if not exercises_response or not exercises_response.get("exercises"):
                return None, f"–î–ª—è —Ç–µ–º—ã '{topic_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ç–µ–º—É."

            exercises = exercises_response["exercises"]

            return {
                "topic_id": topic_id,
                "topic_name": topic_name,
                "exercises": exercises,
                "header": f"üìã –í–∞—à–∏ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é\n–¢–µ–º–∞: {topic_name}\n–ù–∞–π–¥–µ–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {len(exercises)}",
            }, None

        except Exception as e:
            logger.error(f"Error getting user tasks: {e}")
            return None, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏–π."

    async def _get_user_pairs(self, user_id: int = None):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            pairs = await self.api_client.get_user_pairs()
            return pairs, None
        except Exception as e:
            logger.error(f"Error getting user pairs: {e}")
            return None, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∞—Ä."

    async def _handle_mytasks_common(self, language: str, send_message_func, edit_message_func=None):
        """–û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ mytasks –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –∏ callback"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–∞—è –ø–∞—Ä–∞
            pairs_data, error_message = await self._get_user_pairs()
            if error_message:
                await send_message_func(error_message)
                return

            if len(pairs_data) == 0:
                await send_message_func(get_text("no_confirmed_pairs", language))
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–∞—è –ø–∞—Ä–∞
            has_confirmed_pairs = False
            for pair in pairs_data:
                if pair["status"] == "confirmed":
                    has_confirmed_pairs = True
                    break

            if not has_confirmed_pairs:
                await send_message_func(get_text("no_confirmed_pairs", language))
                return

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π
            tasks_data, error_message = await self._get_user_tasks(language)

            if error_message:
                await send_message_func(error_message)
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            if edit_message_func:
                await edit_message_func(tasks_data["header"])
            else:
                await send_message_func(tasks_data["header"])

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            for exercise in tasks_data["exercises"]:
                exercise_text = exercise["content_text"]
                formatted_text = f"{exercise_text}"

                # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (Telegram –ª–∏–º–∏—Ç ~4096 —Å–∏–º–≤–æ–ª–æ–≤)
                if len(formatted_text) > 4000:
                    parts = [formatted_text[j : j + 4000] for j in range(0, len(formatted_text), 4000)]
                    for part in parts:
                        await send_message_func(part)
                else:
                    await send_message_func(formatted_text)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ø–∞—Ä—Ç–Ω–µ—Ä –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –¥—Ä—É–≥–∏–µ –∑–∞–¥–∞–Ω–∏—è
            await send_message_func(get_text("partner_may_have_other_tasks", language))

            logger.info(f"User requested mytasks, found {len(tasks_data['exercises'])} exercises")

        except Exception as e:
            logger.error(f"MyTasks common handler error: {e}")
            await send_message_func(get_text("error_unknown", "ru"))

    async def _handle_find_candidates_common(self, language: str, send_message_func, edit_message_func=None):
        """–û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ (–¥–ª—è –∫–æ–º–∞–Ω–¥—ã –∏ callback)"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            registration = await self.api_client.get_current_registration()
            if not registration:
                await send_message_func("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –Ω–µ–¥–µ–ª—é: /register")
                return

            # –ò—â–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
            match_request = {"week_start_date": registration["week_start_date"], "limit": 5}
            candidates_response = await self.api_client.find_candidates(match_request)
            candidates = candidates_response.get("candidates", [])

            if not candidates:
                await send_message_func(get_text("find_candidates_no_results", language))
                return

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
            keyboard = []
            for candidate in candidates[:5]:
                name = candidate.get("name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
                score = candidate.get("match_score", 0)
                preferred_time = candidate.get("preferred_time_msk", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
                selected_topics = candidate.get("selected_topics", [])

                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Ç–µ–º—É –∏–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"
                topic_display = selected_topics[0] if selected_topics else "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
                button_text = f"{name} {preferred_time}"
                keyboard.append([InlineKeyboardButton(button_text, callback_data=f"candidate_{candidate['user_id']}")])

            keyboard.append([InlineKeyboardButton(get_button_text("cancel", language), callback_data="cancel")])

            reply_markup = InlineKeyboardMarkup(keyboard)
            message_text = get_text("find_candidates_success", language).format(count=len(candidates))

            if edit_message_func:
                await edit_message_func(message_text, reply_markup=reply_markup)
            else:
                await send_message_func(message_text, reply_markup=reply_markup)

            logger.info(f"User requested find candidates, found {len(candidates)} candidates")

        except Exception as e:
            logger.error(f"Find candidates common handler error: {e}")
            await send_message_func(get_text("error_unknown", "ru"))

    async def _handle_pairs_common(self, language: str, send_message_func, edit_message_func=None):
        """–û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏ callback"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            pairs = await self.api_client.get_user_pairs()

            if not pairs:
                await send_message_func(get_text("pairs_empty", language))
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞—Ä –∫–∞–∫ –∫–Ω–æ–ø–∫–∏
            pairs_text = get_text("pairs_welcome", language) + "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É:"
            keyboard = []

            for i, pair in enumerate(pairs[:5], 1):
                partner_name = pair.get("partner_name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
                status = pair.get("status", "unknown")
                pair_id = pair.get("id")

                status_emoji = "‚úÖ" if status == "confirmed" else "‚è≥" if status == "pending" else "‚ùå"
                button_text = f"{i}. {status_emoji} {partner_name} ({status})"

                # –ö–∞–∂–¥–∞—è –ø–∞—Ä–∞ - —ç—Ç–æ –∫–Ω–æ–ø–∫–∞
                keyboard.append([InlineKeyboardButton(button_text, callback_data=f"pair_details_{pair_id}")])

            keyboard.append([self._create_back_button(language, "cancel")])
            reply_markup = InlineKeyboardMarkup(keyboard)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if edit_message_func:
                await edit_message_func(pairs_text, reply_markup=reply_markup)
            else:
                await send_message_func(pairs_text, reply_markup=reply_markup)

            logger.info(f"User requested pairs, found {len(pairs)} pairs")

        except Exception as e:
            logger.error(f"Pairs common handler error: {e}")
            await send_message_func(get_text("error_unknown", "ru"))

    def _create_main_menu_keyboard(self, language: str) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        keyboard = [
            [
                InlineKeyboardButton(get_button_text("register", language), callback_data="register"),
                InlineKeyboardButton("üìã –ó–∞–¥–∞–Ω–∏—è", callback_data="mytasks"),
            ],
            [
                InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤", callback_data="find"),
                InlineKeyboardButton("üë• –ú–æ–∏ –ø–∞—Ä—ã", callback_data="pairs"),
            ],
        ]

        return InlineKeyboardMarkup(keyboard)

    async def _show_main_menu_common(
        self, language: str, send_message_func, edit_message_func=None, message_text: str = None
    ):
        """–û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        from orator_translations import get_text

        if message_text is None:
            message_text = (
                get_text("main_menu_welcome", language)
                if hasattr(get_text, "main_menu_welcome")
                else "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )

        reply_markup = self._create_main_menu_keyboard(language)

        if edit_message_func:
            await edit_message_func(message_text, reply_markup=reply_markup)
        else:
            await send_message_func(message_text, reply_markup=reply_markup)

    async def _show_main_menu_with_topics_common(
        self, language: str, send_message_func, edit_message_func=None, message_text: str = None
    ):
        """–û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π —Ç–µ–º"""
        from orator_translations import get_text

        if message_text is None:
            message_text = (
                get_text("main_menu_welcome", language)
                if hasattr(get_text, "main_menu_welcome")
                else "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )

        reply_markup = self._create_main_menu_keyboard(language)

        if edit_message_func:
            await edit_message_func(message_text, reply_markup=reply_markup)
        else:
            await send_message_func(message_text, reply_markup=reply_markup)

    def _create_back_button(self, language: str, callback_data: str = "cancel") -> InlineKeyboardButton:
        """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥'"""
        return InlineKeyboardButton(get_button_text("back", language), callback_data=callback_data)

    def _create_back_keyboard(self, language: str, callback_data: str = "cancel") -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π '–ù–∞–∑–∞–¥'"""
        return InlineKeyboardMarkup([[self._create_back_button(language, callback_data)]])
