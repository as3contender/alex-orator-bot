"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–∏
"""

from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from loguru import logger

from .base_handler import OratorBaseHandler
from orator_translations import get_text, get_button_text

from telegram.constants import ParseMode

from urllib.parse import quote


def escape_html(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML —Å–∏–º–≤–æ–ª—ã"""
    return text.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")


class PairsHandler(OratorBaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–∏"""

    async def _handle_pairs_common(self, language: str, send_message_func, edit_message_func=None):
        """–û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏ callback"""
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        pairs = await self.api_client.get_user_pairs()

        if not pairs:
            await send_message_func(get_text("pairs_empty", language))
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞—Ä –∫–∞–∫ –∫–Ω–æ–ø–∫–∏
        pairs_text = get_text("pairs_welcome", language) + "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É:"
        keyboard = []

        for i, pair in enumerate(pairs[:5], 1):
            partner_name = pair.get("partner_name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
            status = pair.get("status", "unknown")
            pair_id = pair.get("id")

            status_emoji = "‚úÖ" if status == "confirmed" else "‚è≥" if status == "pending" else "‚ùå"
            button_text = f"{i}. {status_emoji} {partner_name} ({status})"

            # –ö–∞–∂–¥–∞—è –ø–∞—Ä–∞ - —ç—Ç–æ –∫–Ω–æ–ø–∫–∞
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f"pair_details_{pair_id}")])

        keyboard.append([self._create_back_button(language, "cancel")])
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if edit_message_func:
            await edit_message_func(pairs_text, reply_markup=reply_markup)
        else:
            await send_message_func(pairs_text, reply_markup=reply_markup)

    async def handle_pairs_message(self, update, language: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–∞—Ä"""
        await self._handle_pairs_common(language, update.message.reply_text)

    async def handle_pairs_callback(self, query, language: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–∞—Ä"""
        await self._handle_pairs_common(language, query.edit_message_text)

    async def handle_pair_details(self, query, callback_data: str, language: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ—Ç–∞–ª–µ–π –ø–∞—Ä—ã"""
        pair_id = callback_data.replace("pair_details_", "")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä–µ
        pairs = await self.api_client.get_user_pairs()
        target_pair = None
        for pair in pairs:
            if pair.get("id") == pair_id:
                target_pair = pair
                break

        if not target_pair:
            await query.edit_message_text(
                "‚ùå –ü–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
            )
            return

        partner_name = target_pair.get("partner_name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        status = target_pair.get("status", "unknown")
        is_initiator = target_pair.get("is_initiator", False)
        if status == "confirmed":
            username = target_pair.get("partner_username", "")
        else:
            username = ""

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞—Ä–µ
        status_emoji = "‚úÖ" if status == "confirmed" else "‚è≥" if status == "pending" else "‚ùå"
        status_text = (
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞" if status == "confirmed" else "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è" if status == "pending" else "–û—Ç–º–µ–Ω–µ–Ω–∞"
        )

        pair_info = f"üë• –ü–∞—Ä–∞ —Å {partner_name} \n"
        if status == "confirmed":
            if username == "":
                # user_link = f"[{partner_name}](tg://user?id={target_pair['partner_telegram_id']})"
                user_link = (
                    f'<a href="tg://user?id={target_pair["partner_telegram_id"]}">{escape_html(partner_name)}</a>'
                )
            else:
                user_link = f"@{username}"
            pair_info += f"üë§ –ù–∏–∫ –¥–ª—è —Å–≤—è–∑–∏: {user_link}\n"
        pair_info += f"üìä –°—Ç–∞—Ç—É—Å: {status_emoji} {status_text}\n"
        pair_info += f"üéØ –†–æ–ª—å: {'–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä' if is_initiator else '–£—á–∞—Å—Ç–Ω–∏–∫'}\n"

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = []

        if status == "pending":
            if not is_initiator:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä - –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
                keyboard.append([InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"pair_confirm_{pair_id}")])
            # –õ—é–±–æ–π –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å
            keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"pair_cancel_{pair_id}")])

        # –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø–∞—Ä
        message_text = "–ü—Ä–∏–≤–µ—Ç! –Ø –æ—Ç @AlexOratorBot"
        start_dialog_message = quote(message_text)

        if status == "confirmed":
            if status == "confirmed" and username:
                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (username)
                if username == "":
                    keyboard.append(
                        [
                            InlineKeyboardButton(
                                "‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram",
                                url=f"tg://user?id={target_pair['partner_telegram_id']}&text={start_dialog_message}",
                            )
                        ]
                    )
                else:
                    keyboard.append(
                        [
                            InlineKeyboardButton(
                                "‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram", url=f"https://t.me/{username}?text={start_dialog_message}"
                            )
                        ]
                    )
            keyboard.append([InlineKeyboardButton("üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", callback_data=f"pair_feedback_{pair_id}")])

        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–∞—Ä–∞–º", callback_data="pairs")])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(pair_info, reply_markup=reply_markup, parse_mode=ParseMode.HTML)

    async def _handle_pair_action_common(
        self, action_func, success_message: str, error_message: str, query, language: str
    ):
        """–û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–∞—Ä–∞–º–∏ (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –æ—Ç–º–µ–Ω–∞, —Å–æ–∑–¥–∞–Ω–∏–µ)"""
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            await action_func()

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ, –∑–∞—Ç–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–∞—Ä
            await query.edit_message_text(f"‚úÖ {success_message} –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—à–∏ –ø–∞—Ä—ã...")

            # –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏–∫—É –ø–æ–∫–∞–∑–∞ –ø–∞—Ä
            await self.handle_pairs_callback(query, language)

        except Exception as e:
            logger.error(f"Pair action error: {e}")
            await query.edit_message_text(f"‚ùå {error_message}")

    async def handle_pair_confirm(self, query, callback_data: str, language: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–∞—Ä—ã"""
        pair_id = callback_data.replace("pair_confirm_", "")

        async def confirm_action():
            await self.api_client.confirm_pair(pair_id)

        await self._handle_pair_action_common(
            confirm_action, "–ü–∞—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–∞—Ä—ã", query, language
        )

    async def handle_pair_cancel(self, query, callback_data: str, language: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–∞—Ä—ã"""
        pair_id = callback_data.replace("pair_cancel_", "")

        async def cancel_action():
            await self.api_client.cancel_pair(pair_id)

        await self._handle_pair_action_common(
            cancel_action, "–ü–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–∞—Ä—ã", query, language
        )

    async def handle_candidate_selection(self, query, callback_data: str, language: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"""
        candidate_id = callback_data.replace("candidate_", "")

        async def create_action():
            await self.api_client.create_pair(candidate_id)

        await self._handle_pair_action_common(
            create_action, "–ü–∞—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞!", get_text("pair_failed", language), query, language
        )
