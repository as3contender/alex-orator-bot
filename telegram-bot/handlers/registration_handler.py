"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""

from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from loguru import logger

from .base_handler import OratorBaseHandler
from orator_translations import get_button_text


class RegistrationHandler(OratorBaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""

    def __init__(self, api_client, content_manager=None):
        super().__init__(api_client, content_manager)
        self.selected_week = "current"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è

    async def handle_register_callback(self, query, language: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        logger.info("=== REGISTRATION: Starting registration process ===")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        try:
            current_registration = await self.api_client.get_current_registration()
            logger.info(f"REGISTRATION: Current registration check result: {current_registration}")
        except Exception as e:
            logger.error(f"REGISTRATION: Error checking current registration: {e}")
            current_registration = None
        if current_registration:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
            keyboard = [
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", callback_data="cancel_registration")],
                [InlineKeyboardButton(get_button_text("back", language), callback_data="main_menu")],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            registration_text = f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é.\n\n"
            registration_text += f"üìÖ –ù–µ–¥–µ–ª—è: {current_registration.get('week_start_date', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} - {current_registration.get('week_end_date', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            registration_text += f"üïê –í—Ä–µ–º—è: {current_registration.get('preferred_time_msk', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            registration_text += f"üìù –°—Ç–∞—Ç—É—Å: {current_registration.get('status', '–ê–∫—Ç–∏–≤–Ω–∞')}"

            await query.edit_message_text(registration_text, reply_markup=reply_markup)
            return

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–µ–¥–µ–ª–∏
        keyboard = [
            [
                InlineKeyboardButton("üìÖ –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è", callback_data="week_current"),
                InlineKeyboardButton("üìÖ –°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è", callback_data="week_next"),
            ],
            [
                InlineKeyboardButton(get_button_text("cancel", language), callback_data="cancel"),
            ],
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        registration_message = await self._get_bot_content("chat_rules", language)
        await query.edit_message_text(registration_message, reply_markup=reply_markup)

    async def handle_week_selection(self, query, callback_data: str, language: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–µ–¥–µ–ª–∏"""
        week_type = callback_data.replace("week_", "")
        logger.info(f"REGISTRATION: Week selected: {week_type}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –Ω–µ–¥–µ–ª—é –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ (–ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π)
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å FSM –∏–ª–∏ –∫—ç—à
        self.selected_week = week_type
        logger.info(f"REGISTRATION: Selected week saved: {self.selected_week}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
        keyboard = [
            [
                InlineKeyboardButton("üïó –£—Ç—Ä–æ (6:00‚Äì11:59)", callback_data="time_06:00"),
                InlineKeyboardButton("üåû –î–µ–Ω—å (12:00‚Äì17:59)", callback_data="time_12:00"),
            ],
            [
                InlineKeyboardButton("üåá –í–µ—á–µ—Ä (18:00‚Äì23:59)", callback_data="time_18:00"),
                InlineKeyboardButton("üåô –ù–æ—á—å (00:00‚Äì05:59)", callback_data="time_00:00"),
            ],
            [InlineKeyboardButton(get_button_text("back", language), callback_data="register")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        week_text = "–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è" if week_type == "current" else "–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è"
        await query.edit_message_text(
            f"–í—ã–±—Ä–∞–Ω–∞ –Ω–µ–¥–µ–ª—è: {week_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–µ –≤—Ä–µ–º—è.\n\n‚ùóÔ∏è–≠—Ç–æ –ª–∏—à—å –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è ‚Äì –æ —Ç–æ—á–Ω–æ–º –Ω—É–∂–Ω–æ –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è —Å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º –≤ –ø–µ—Ä–µ–ø–∏—Å–∫–µ",
            reply_markup=reply_markup,
        )

    async def handle_time_selection(self, query, callback_data: str, language: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –∏–∑ callback_data
        selected_time = callback_data.replace("time_", "")
        logger.info(f"REGISTRATION: Time selected: {selected_time}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        self.selected_time = selected_time
        logger.info(f"REGISTRATION: Selected time saved: {self.selected_time}")

        # –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–µ–º—ã
        message_text = f"‚úÖ –í—Ä–µ–º—è –≤—ã–±—Ä–∞–Ω–æ: {selected_time}\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Ç–µ–º–∞–º
        await query.edit_message_text(
            message_text,
        )
        return True  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–µ–º

    async def create_registration_with_topic(self, topic_id: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–æ–π"""
        logger.info(f"REGISTRATION: Starting registration creation with topic: {topic_id}")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        week_type = getattr(self, "selected_week", "current")
        selected_time = getattr(self, "selected_time", "10:00")

        logger.info(f"REGISTRATION: Retrieved saved data - week: {week_type}, time: {selected_time}")

        # –°–æ–∑–¥–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–æ–π (topic_id —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —É—Ä–æ–≤–µ–Ω—å)
        registration_data = {
            "week_type": week_type,
            "preferred_time_msk": selected_time,
            "selected_topics": [topic_id],
        }

        logger.info(f"REGISTRATION: Registration data prepared: {registration_data}")

        try:
            result = await self.api_client.register_for_week(registration_data)
            logger.info(f"REGISTRATION: API call successful. Result: {result}")
            logger.info(f"REGISTRATION: Registration created successfully with topic {topic_id}")
            return True
        except Exception as e:
            logger.error(f"REGISTRATION: Registration error: {e}")
            return False

    async def handle_cancel_registration_callback(self, query, language: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        try:
            await self.api_client.cancel_registration()
            keyboard = [
                [InlineKeyboardButton("‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞", callback_data="register")],
                [InlineKeyboardButton(get_button_text("back", language), callback_data="main_menu")],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞!\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞.",
                reply_markup=reply_markup,
            )
        except Exception as e:
            logger.error(f"Cancel registration error: {e}")
            keyboard = [
                [InlineKeyboardButton(get_button_text("back", language), callback_data="main_menu")],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=reply_markup
            )
