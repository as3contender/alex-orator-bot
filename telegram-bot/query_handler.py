from telegram import Update
from telegram.ext import ContextTypes
from loguru import logger
import asyncio

from api_client import APIClient
from translations import get_text
from formatters import format_query_results
from exceptions import CloverdashBotException


class QueryHandler:
    def __init__(self, api_client: APIClient):
        self.api_client = api_client

    async def handle_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            user = update.effective_user
            query_text = update.message.text.strip()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_message = await update.message.reply_text("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")

            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await self.api_client.authenticate_telegram_user(
                    telegram_id=str(user.id),
                    username=user.username,
                    first_name=user.first_name,
                    last_name=user.last_name,
                )
            except Exception as e:
                logger.error(f"Authentication failed for user {user.id}: {e}")
                await processing_message.edit_text("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
                return

            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                settings = await self.api_client.get_user_settings()
                language = settings.language
            except:
                language = "ru"

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            try:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                formatted_result = format_query_results(
                    None, language, settings.show_explanations, settings.show_sql, settings.max_results
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                await processing_message.edit_text(formatted_result, )

                logger.info(f"Query processed successfully for user {user.id}: {query_text[:50]}...")

            except Exception as e:
                logger.error(f"Query processing failed for user {user.id}: {e}")
                error_message = get_text("query_error", language)
                await processing_message.edit_text(f"‚ùå {error_message}")

        except Exception as e:
            logger.error(f"Query handler error: {e}")
            try:
                await processing_message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
            except:
                await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫"""
        try:
            query = update.callback_query
            await query.answer()

            user = update.effective_user
            callback_data = query.data

            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await self.api_client.authenticate_telegram_user(
                    telegram_id=str(user.id),
                    username=user.username,
                    first_name=user.first_name,
                    last_name=user.last_name,
                )
            except Exception as e:
                logger.error(f"Authentication failed for user {user.id}: {e}")
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
                return

            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                settings = await self.api_client.get_user_settings()
                language = settings.language
            except:
                language = "ru"

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã callback
            if callback_data.startswith("sample_query_"):
                await self._handle_sample_query(query, callback_data, language)
            elif callback_data.startswith("sample_table_"):
                await self._handle_sample_table(query, callback_data, language)
            elif callback_data == "help":
                await self._handle_help_callback(query, language)
            elif callback_data == "tables":
                await self._handle_tables_callback(query, language)
            elif callback_data == "toggle_explanations":
                await self._handle_toggle_explanations(query, settings, language)
            elif callback_data == "toggle_sql":
                await self._handle_toggle_sql(query, settings, language)
            elif callback_data == "change_language":
                await self._handle_change_language(query, language)
            elif callback_data == "reset_settings":
                await self._handle_reset_settings(query, language)
            else:
                await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

        except Exception as e:
            logger.error(f"Callback query handler error: {e}")
            try:
                await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")
            except:
                pass

    async def _handle_sample_query(self, query, callback_data: str, language: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–º–µ—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞"""
        sample_queries = {
            "sample_query_1": get_text("sample_query_1_text", language),
            "sample_query_2": get_text("sample_query_2_text", language),
            "sample_query_3": get_text("sample_query_3_text", language),
            "sample_query_4": get_text("sample_query_4_text", language),
        }

        sample_text = sample_queries.get(callback_data, "–ü–æ–∫–∞–∂–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ")

        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            formatted_result = format_query_results(None, language, True, True, 20)
            await query.edit_message_text(formatted_result, )
        except Exception as e:
            logger.error(f"Sample query failed: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–∏–º–µ—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞")

    async def _handle_sample_table(self, query, callback_data: str, language: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã"""
        table_name = callback_data.replace("sample_table_", "")

        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            formatted_data = format_query_results(None, language, True, True, 10)
            await query.edit_message_text(formatted_data, )
        except Exception as e:
            logger.error(f"Sample table failed: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∏–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö")

    async def _handle_help_callback(self, query, language: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback —Å–ø—Ä–∞–≤–∫–∏"""
        help_text = get_text("help_message", language)
        await query.edit_message_text(help_text, )

    async def _handle_tables_callback(self, query, language: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü"""
        try:
            tables = await self.api_client.get_tables()
            if not tables:
                await query.edit_message_text(get_text("no_tables", language))
                return

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            formatted_tables = format_query_results(None, language, True, True, 0)
            await query.edit_message_text(formatted_tables, )
        except Exception as e:
            logger.error(f"Tables callback failed: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü")

    async def _handle_toggle_explanations(self, query, settings, language: str):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π"""
        try:
            new_value = not settings.show_explanations
            await self.api_client.update_user_settings({"show_explanations": new_value})

            status = "–≤–∫–ª—é—á–µ–Ω—ã" if new_value else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
            await query.edit_message_text(f"‚úÖ –û–±—ä—è—Å–Ω–µ–Ω–∏—è {status}")
        except Exception as e:
            logger.error(f"Toggle explanations failed: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")

    async def _handle_toggle_sql(self, query, settings, language: str):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞ SQL"""
        try:
            new_value = not settings.show_sql
            await self.api_client.update_user_settings({"show_sql": new_value})

            status = "–≤–∫–ª—é—á–µ–Ω" if new_value else "–æ—Ç–∫–ª—é—á–µ–Ω"
            await query.edit_message_text(f"‚úÖ –ü–æ–∫–∞–∑ SQL {status}")
        except Exception as e:
            logger.error(f"Toggle SQL failed: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")

    async def _handle_change_language(self, query, language: str):
        """–°–º–µ–Ω–∞ —è–∑—ã–∫–∞"""
        new_language = "en" if language == "ru" else "ru"
        try:
            await self.api_client.update_user_settings({"language": new_language})
            await query.edit_message_text(f"‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_language.upper()}")
        except Exception as e:
            logger.error(f"Change language failed: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞")

    async def _handle_reset_settings(self, query, language: str):
        """–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            await self.api_client.reset_user_settings()
            await query.edit_message_text("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        except Exception as e:
            logger.error(f"Reset settings failed: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
